# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_required': 'bool',
        'auto_max_files': 'bool',
        'available_ssd': 'float',
        'available_ssd_metadata': 'float',
        'available_total': 'float',
        'free_ssd': 'float',
        'free_total': 'float',
        'group_id': 'str',
        'group_name': 'str',
        'id': 'str',
        'is_creating': 'bool',
        'is_encrypted': 'bool',
        'is_ready': 'bool',
        'is_removing': 'bool',
        'metadata_budget': 'float',
        'name': 'str',
        'object_storages': 'list[FileSystemObjectStorages]',
        'obs_buckets': 'list[FileSystemObjectStorages]',
        'ssd_budget': 'float',
        'status': 'str',
        'total_budget': 'float',
        'uid': 'str',
        'used_ssd': 'float',
        'used_ssd_data': 'float',
        'used_ssd_metadata': 'float',
        'used_total': 'float',
        'used_total_data': 'float'
    }

    attribute_map = {
        'auth_required': 'auth_required',
        'auto_max_files': 'auto_max_files',
        'available_ssd': 'available_ssd',
        'available_ssd_metadata': 'available_ssd_metadata',
        'available_total': 'available_total',
        'free_ssd': 'free_ssd',
        'free_total': 'free_total',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'id': 'id',
        'is_creating': 'is_creating',
        'is_encrypted': 'is_encrypted',
        'is_ready': 'is_ready',
        'is_removing': 'is_removing',
        'metadata_budget': 'metadata_budget',
        'name': 'name',
        'object_storages': 'object_storages',
        'obs_buckets': 'obs_buckets',
        'ssd_budget': 'ssd_budget',
        'status': 'status',
        'total_budget': 'total_budget',
        'uid': 'uid',
        'used_ssd': 'used_ssd',
        'used_ssd_data': 'used_ssd_data',
        'used_ssd_metadata': 'used_ssd_metadata',
        'used_total': 'used_total',
        'used_total_data': 'used_total_data'
    }

    def __init__(self, auth_required=None, auto_max_files=None, available_ssd=None, available_ssd_metadata=None, available_total=None, free_ssd=None, free_total=None, group_id=None, group_name=None, id=None, is_creating=None, is_encrypted=None, is_ready=None, is_removing=None, metadata_budget=None, name=None, object_storages=None, obs_buckets=None, ssd_budget=None, status=None, total_budget=None, uid=None, used_ssd=None, used_ssd_data=None, used_ssd_metadata=None, used_total=None, used_total_data=None):  # noqa: E501
        """FileSystem - a model defined in Swagger"""  # noqa: E501
        self._auth_required = None
        self._auto_max_files = None
        self._available_ssd = None
        self._available_ssd_metadata = None
        self._available_total = None
        self._free_ssd = None
        self._free_total = None
        self._group_id = None
        self._group_name = None
        self._id = None
        self._is_creating = None
        self._is_encrypted = None
        self._is_ready = None
        self._is_removing = None
        self._metadata_budget = None
        self._name = None
        self._object_storages = None
        self._obs_buckets = None
        self._ssd_budget = None
        self._status = None
        self._total_budget = None
        self._uid = None
        self._used_ssd = None
        self._used_ssd_data = None
        self._used_ssd_metadata = None
        self._used_total = None
        self._used_total_data = None
        self.discriminator = None
        if auth_required is not None:
            self.auth_required = auth_required
        if auto_max_files is not None:
            self.auto_max_files = auto_max_files
        if available_ssd is not None:
            self.available_ssd = available_ssd
        if available_ssd_metadata is not None:
            self.available_ssd_metadata = available_ssd_metadata
        if available_total is not None:
            self.available_total = available_total
        if free_ssd is not None:
            self.free_ssd = free_ssd
        if free_total is not None:
            self.free_total = free_total
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if id is not None:
            self.id = id
        if is_creating is not None:
            self.is_creating = is_creating
        if is_encrypted is not None:
            self.is_encrypted = is_encrypted
        if is_ready is not None:
            self.is_ready = is_ready
        if is_removing is not None:
            self.is_removing = is_removing
        if metadata_budget is not None:
            self.metadata_budget = metadata_budget
        if name is not None:
            self.name = name
        if object_storages is not None:
            self.object_storages = object_storages
        if obs_buckets is not None:
            self.obs_buckets = obs_buckets
        if ssd_budget is not None:
            self.ssd_budget = ssd_budget
        if status is not None:
            self.status = status
        if total_budget is not None:
            self.total_budget = total_budget
        if uid is not None:
            self.uid = uid
        if used_ssd is not None:
            self.used_ssd = used_ssd
        if used_ssd_data is not None:
            self.used_ssd_data = used_ssd_data
        if used_ssd_metadata is not None:
            self.used_ssd_metadata = used_ssd_metadata
        if used_total is not None:
            self.used_total = used_total
        if used_total_data is not None:
            self.used_total_data = used_total_data

    @property
    def auth_required(self):
        """Gets the auth_required of this FileSystem.  # noqa: E501


        :return: The auth_required of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._auth_required

    @auth_required.setter
    def auth_required(self, auth_required):
        """Sets the auth_required of this FileSystem.


        :param auth_required: The auth_required of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._auth_required = auth_required

    @property
    def auto_max_files(self):
        """Gets the auto_max_files of this FileSystem.  # noqa: E501


        :return: The auto_max_files of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._auto_max_files

    @auto_max_files.setter
    def auto_max_files(self, auto_max_files):
        """Sets the auto_max_files of this FileSystem.


        :param auto_max_files: The auto_max_files of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._auto_max_files = auto_max_files

    @property
    def available_ssd(self):
        """Gets the available_ssd of this FileSystem.  # noqa: E501


        :return: The available_ssd of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._available_ssd

    @available_ssd.setter
    def available_ssd(self, available_ssd):
        """Sets the available_ssd of this FileSystem.


        :param available_ssd: The available_ssd of this FileSystem.  # noqa: E501
        :type: float
        """

        self._available_ssd = available_ssd

    @property
    def available_ssd_metadata(self):
        """Gets the available_ssd_metadata of this FileSystem.  # noqa: E501


        :return: The available_ssd_metadata of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._available_ssd_metadata

    @available_ssd_metadata.setter
    def available_ssd_metadata(self, available_ssd_metadata):
        """Sets the available_ssd_metadata of this FileSystem.


        :param available_ssd_metadata: The available_ssd_metadata of this FileSystem.  # noqa: E501
        :type: float
        """

        self._available_ssd_metadata = available_ssd_metadata

    @property
    def available_total(self):
        """Gets the available_total of this FileSystem.  # noqa: E501


        :return: The available_total of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._available_total

    @available_total.setter
    def available_total(self, available_total):
        """Sets the available_total of this FileSystem.


        :param available_total: The available_total of this FileSystem.  # noqa: E501
        :type: float
        """

        self._available_total = available_total

    @property
    def free_ssd(self):
        """Gets the free_ssd of this FileSystem.  # noqa: E501


        :return: The free_ssd of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._free_ssd

    @free_ssd.setter
    def free_ssd(self, free_ssd):
        """Sets the free_ssd of this FileSystem.


        :param free_ssd: The free_ssd of this FileSystem.  # noqa: E501
        :type: float
        """

        self._free_ssd = free_ssd

    @property
    def free_total(self):
        """Gets the free_total of this FileSystem.  # noqa: E501


        :return: The free_total of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._free_total

    @free_total.setter
    def free_total(self, free_total):
        """Sets the free_total of this FileSystem.


        :param free_total: The free_total of this FileSystem.  # noqa: E501
        :type: float
        """

        self._free_total = free_total

    @property
    def group_id(self):
        """Gets the group_id of this FileSystem.  # noqa: E501


        :return: The group_id of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FileSystem.


        :param group_id: The group_id of this FileSystem.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this FileSystem.  # noqa: E501


        :return: The group_name of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this FileSystem.


        :param group_name: The group_name of this FileSystem.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this FileSystem.  # noqa: E501


        :return: The id of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileSystem.


        :param id: The id of this FileSystem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_creating(self):
        """Gets the is_creating of this FileSystem.  # noqa: E501


        :return: The is_creating of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._is_creating

    @is_creating.setter
    def is_creating(self, is_creating):
        """Sets the is_creating of this FileSystem.


        :param is_creating: The is_creating of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._is_creating = is_creating

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this FileSystem.  # noqa: E501


        :return: The is_encrypted of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this FileSystem.


        :param is_encrypted: The is_encrypted of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_ready(self):
        """Gets the is_ready of this FileSystem.  # noqa: E501


        :return: The is_ready of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """Sets the is_ready of this FileSystem.


        :param is_ready: The is_ready of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._is_ready = is_ready

    @property
    def is_removing(self):
        """Gets the is_removing of this FileSystem.  # noqa: E501


        :return: The is_removing of this FileSystem.  # noqa: E501
        :rtype: bool
        """
        return self._is_removing

    @is_removing.setter
    def is_removing(self, is_removing):
        """Sets the is_removing of this FileSystem.


        :param is_removing: The is_removing of this FileSystem.  # noqa: E501
        :type: bool
        """

        self._is_removing = is_removing

    @property
    def metadata_budget(self):
        """Gets the metadata_budget of this FileSystem.  # noqa: E501


        :return: The metadata_budget of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._metadata_budget

    @metadata_budget.setter
    def metadata_budget(self, metadata_budget):
        """Sets the metadata_budget of this FileSystem.


        :param metadata_budget: The metadata_budget of this FileSystem.  # noqa: E501
        :type: float
        """

        self._metadata_budget = metadata_budget

    @property
    def name(self):
        """Gets the name of this FileSystem.  # noqa: E501


        :return: The name of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileSystem.


        :param name: The name of this FileSystem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_storages(self):
        """Gets the object_storages of this FileSystem.  # noqa: E501


        :return: The object_storages of this FileSystem.  # noqa: E501
        :rtype: list[FileSystemObjectStorages]
        """
        return self._object_storages

    @object_storages.setter
    def object_storages(self, object_storages):
        """Sets the object_storages of this FileSystem.


        :param object_storages: The object_storages of this FileSystem.  # noqa: E501
        :type: list[FileSystemObjectStorages]
        """

        self._object_storages = object_storages

    @property
    def obs_buckets(self):
        """Gets the obs_buckets of this FileSystem.  # noqa: E501


        :return: The obs_buckets of this FileSystem.  # noqa: E501
        :rtype: list[FileSystemObjectStorages]
        """
        return self._obs_buckets

    @obs_buckets.setter
    def obs_buckets(self, obs_buckets):
        """Sets the obs_buckets of this FileSystem.


        :param obs_buckets: The obs_buckets of this FileSystem.  # noqa: E501
        :type: list[FileSystemObjectStorages]
        """

        self._obs_buckets = obs_buckets

    @property
    def ssd_budget(self):
        """Gets the ssd_budget of this FileSystem.  # noqa: E501


        :return: The ssd_budget of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._ssd_budget

    @ssd_budget.setter
    def ssd_budget(self, ssd_budget):
        """Sets the ssd_budget of this FileSystem.


        :param ssd_budget: The ssd_budget of this FileSystem.  # noqa: E501
        :type: float
        """

        self._ssd_budget = ssd_budget

    @property
    def status(self):
        """Gets the status of this FileSystem.  # noqa: E501


        :return: The status of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileSystem.


        :param status: The status of this FileSystem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_budget(self):
        """Gets the total_budget of this FileSystem.  # noqa: E501


        :return: The total_budget of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._total_budget

    @total_budget.setter
    def total_budget(self, total_budget):
        """Sets the total_budget of this FileSystem.


        :param total_budget: The total_budget of this FileSystem.  # noqa: E501
        :type: float
        """

        self._total_budget = total_budget

    @property
    def uid(self):
        """Gets the uid of this FileSystem.  # noqa: E501


        :return: The uid of this FileSystem.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FileSystem.


        :param uid: The uid of this FileSystem.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def used_ssd(self):
        """Gets the used_ssd of this FileSystem.  # noqa: E501


        :return: The used_ssd of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._used_ssd

    @used_ssd.setter
    def used_ssd(self, used_ssd):
        """Sets the used_ssd of this FileSystem.


        :param used_ssd: The used_ssd of this FileSystem.  # noqa: E501
        :type: float
        """

        self._used_ssd = used_ssd

    @property
    def used_ssd_data(self):
        """Gets the used_ssd_data of this FileSystem.  # noqa: E501


        :return: The used_ssd_data of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._used_ssd_data

    @used_ssd_data.setter
    def used_ssd_data(self, used_ssd_data):
        """Sets the used_ssd_data of this FileSystem.


        :param used_ssd_data: The used_ssd_data of this FileSystem.  # noqa: E501
        :type: float
        """

        self._used_ssd_data = used_ssd_data

    @property
    def used_ssd_metadata(self):
        """Gets the used_ssd_metadata of this FileSystem.  # noqa: E501


        :return: The used_ssd_metadata of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._used_ssd_metadata

    @used_ssd_metadata.setter
    def used_ssd_metadata(self, used_ssd_metadata):
        """Sets the used_ssd_metadata of this FileSystem.


        :param used_ssd_metadata: The used_ssd_metadata of this FileSystem.  # noqa: E501
        :type: float
        """

        self._used_ssd_metadata = used_ssd_metadata

    @property
    def used_total(self):
        """Gets the used_total of this FileSystem.  # noqa: E501


        :return: The used_total of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._used_total

    @used_total.setter
    def used_total(self, used_total):
        """Sets the used_total of this FileSystem.


        :param used_total: The used_total of this FileSystem.  # noqa: E501
        :type: float
        """

        self._used_total = used_total

    @property
    def used_total_data(self):
        """Gets the used_total_data of this FileSystem.  # noqa: E501


        :return: The used_total_data of this FileSystem.  # noqa: E501
        :rtype: float
        """
        return self._used_total_data

    @used_total_data.setter
    def used_total_data(self, used_total_data):
        """Sets the used_total_data of this FileSystem.


        :param used_total_data: The used_total_data of this FileSystem.  # noqa: E501
        :type: float
        """

        self._used_total_data = used_total_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
