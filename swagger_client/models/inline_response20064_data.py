# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20064Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_domain_mapping_from_id': 'float',
        'default_domain_mapping_to_id': 'float',
        'domain_admin_username': 'str',
        'domain_joined': 'bool',
        'domain_name': 'str',
        'domain_netbios_name': 'str',
        'encryption': 'str',
        'idmap_backend': 'str',
        'joined_domain_mapping_from_id': 'float',
        'joined_domain_mapping_to_id': 'float',
        'name': 'str',
        'samba_hosts': 'list[str]',
        'samba_ips': 'list[str]'
    }

    attribute_map = {
        'default_domain_mapping_from_id': 'defaultDomainMappingFromId',
        'default_domain_mapping_to_id': 'defaultDomainMappingToId',
        'domain_admin_username': 'domainAdminUsername',
        'domain_joined': 'domainJoined',
        'domain_name': 'domainName',
        'domain_netbios_name': 'domainNetbiosName',
        'encryption': 'encryption',
        'idmap_backend': 'idmapBackend',
        'joined_domain_mapping_from_id': 'joinedDomainMappingFromId',
        'joined_domain_mapping_to_id': 'joinedDomainMappingToId',
        'name': 'name',
        'samba_hosts': 'sambaHosts',
        'samba_ips': 'sambaIps'
    }

    def __init__(self, default_domain_mapping_from_id=None, default_domain_mapping_to_id=None, domain_admin_username=None, domain_joined=None, domain_name=None, domain_netbios_name=None, encryption=None, idmap_backend=None, joined_domain_mapping_from_id=None, joined_domain_mapping_to_id=None, name=None, samba_hosts=None, samba_ips=None):  # noqa: E501
        """InlineResponse20064Data - a model defined in Swagger"""  # noqa: E501
        self._default_domain_mapping_from_id = None
        self._default_domain_mapping_to_id = None
        self._domain_admin_username = None
        self._domain_joined = None
        self._domain_name = None
        self._domain_netbios_name = None
        self._encryption = None
        self._idmap_backend = None
        self._joined_domain_mapping_from_id = None
        self._joined_domain_mapping_to_id = None
        self._name = None
        self._samba_hosts = None
        self._samba_ips = None
        self.discriminator = None
        if default_domain_mapping_from_id is not None:
            self.default_domain_mapping_from_id = default_domain_mapping_from_id
        if default_domain_mapping_to_id is not None:
            self.default_domain_mapping_to_id = default_domain_mapping_to_id
        if domain_admin_username is not None:
            self.domain_admin_username = domain_admin_username
        if domain_joined is not None:
            self.domain_joined = domain_joined
        if domain_name is not None:
            self.domain_name = domain_name
        if domain_netbios_name is not None:
            self.domain_netbios_name = domain_netbios_name
        if encryption is not None:
            self.encryption = encryption
        if idmap_backend is not None:
            self.idmap_backend = idmap_backend
        if joined_domain_mapping_from_id is not None:
            self.joined_domain_mapping_from_id = joined_domain_mapping_from_id
        if joined_domain_mapping_to_id is not None:
            self.joined_domain_mapping_to_id = joined_domain_mapping_to_id
        if name is not None:
            self.name = name
        if samba_hosts is not None:
            self.samba_hosts = samba_hosts
        if samba_ips is not None:
            self.samba_ips = samba_ips

    @property
    def default_domain_mapping_from_id(self):
        """Gets the default_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501


        :return: The default_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501
        :rtype: float
        """
        return self._default_domain_mapping_from_id

    @default_domain_mapping_from_id.setter
    def default_domain_mapping_from_id(self, default_domain_mapping_from_id):
        """Sets the default_domain_mapping_from_id of this InlineResponse20064Data.


        :param default_domain_mapping_from_id: The default_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501
        :type: float
        """

        self._default_domain_mapping_from_id = default_domain_mapping_from_id

    @property
    def default_domain_mapping_to_id(self):
        """Gets the default_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501


        :return: The default_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501
        :rtype: float
        """
        return self._default_domain_mapping_to_id

    @default_domain_mapping_to_id.setter
    def default_domain_mapping_to_id(self, default_domain_mapping_to_id):
        """Sets the default_domain_mapping_to_id of this InlineResponse20064Data.


        :param default_domain_mapping_to_id: The default_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501
        :type: float
        """

        self._default_domain_mapping_to_id = default_domain_mapping_to_id

    @property
    def domain_admin_username(self):
        """Gets the domain_admin_username of this InlineResponse20064Data.  # noqa: E501


        :return: The domain_admin_username of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._domain_admin_username

    @domain_admin_username.setter
    def domain_admin_username(self, domain_admin_username):
        """Sets the domain_admin_username of this InlineResponse20064Data.


        :param domain_admin_username: The domain_admin_username of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._domain_admin_username = domain_admin_username

    @property
    def domain_joined(self):
        """Gets the domain_joined of this InlineResponse20064Data.  # noqa: E501


        :return: The domain_joined of this InlineResponse20064Data.  # noqa: E501
        :rtype: bool
        """
        return self._domain_joined

    @domain_joined.setter
    def domain_joined(self, domain_joined):
        """Sets the domain_joined of this InlineResponse20064Data.


        :param domain_joined: The domain_joined of this InlineResponse20064Data.  # noqa: E501
        :type: bool
        """

        self._domain_joined = domain_joined

    @property
    def domain_name(self):
        """Gets the domain_name of this InlineResponse20064Data.  # noqa: E501


        :return: The domain_name of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this InlineResponse20064Data.


        :param domain_name: The domain_name of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def domain_netbios_name(self):
        """Gets the domain_netbios_name of this InlineResponse20064Data.  # noqa: E501


        :return: The domain_netbios_name of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._domain_netbios_name

    @domain_netbios_name.setter
    def domain_netbios_name(self, domain_netbios_name):
        """Sets the domain_netbios_name of this InlineResponse20064Data.


        :param domain_netbios_name: The domain_netbios_name of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._domain_netbios_name = domain_netbios_name

    @property
    def encryption(self):
        """Gets the encryption of this InlineResponse20064Data.  # noqa: E501


        :return: The encryption of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this InlineResponse20064Data.


        :param encryption: The encryption of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    @property
    def idmap_backend(self):
        """Gets the idmap_backend of this InlineResponse20064Data.  # noqa: E501


        :return: The idmap_backend of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._idmap_backend

    @idmap_backend.setter
    def idmap_backend(self, idmap_backend):
        """Sets the idmap_backend of this InlineResponse20064Data.


        :param idmap_backend: The idmap_backend of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._idmap_backend = idmap_backend

    @property
    def joined_domain_mapping_from_id(self):
        """Gets the joined_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501


        :return: The joined_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501
        :rtype: float
        """
        return self._joined_domain_mapping_from_id

    @joined_domain_mapping_from_id.setter
    def joined_domain_mapping_from_id(self, joined_domain_mapping_from_id):
        """Sets the joined_domain_mapping_from_id of this InlineResponse20064Data.


        :param joined_domain_mapping_from_id: The joined_domain_mapping_from_id of this InlineResponse20064Data.  # noqa: E501
        :type: float
        """

        self._joined_domain_mapping_from_id = joined_domain_mapping_from_id

    @property
    def joined_domain_mapping_to_id(self):
        """Gets the joined_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501


        :return: The joined_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501
        :rtype: float
        """
        return self._joined_domain_mapping_to_id

    @joined_domain_mapping_to_id.setter
    def joined_domain_mapping_to_id(self, joined_domain_mapping_to_id):
        """Sets the joined_domain_mapping_to_id of this InlineResponse20064Data.


        :param joined_domain_mapping_to_id: The joined_domain_mapping_to_id of this InlineResponse20064Data.  # noqa: E501
        :type: float
        """

        self._joined_domain_mapping_to_id = joined_domain_mapping_to_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20064Data.  # noqa: E501


        :return: The name of this InlineResponse20064Data.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20064Data.


        :param name: The name of this InlineResponse20064Data.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def samba_hosts(self):
        """Gets the samba_hosts of this InlineResponse20064Data.  # noqa: E501


        :return: The samba_hosts of this InlineResponse20064Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._samba_hosts

    @samba_hosts.setter
    def samba_hosts(self, samba_hosts):
        """Sets the samba_hosts of this InlineResponse20064Data.


        :param samba_hosts: The samba_hosts of this InlineResponse20064Data.  # noqa: E501
        :type: list[str]
        """

        self._samba_hosts = samba_hosts

    @property
    def samba_ips(self):
        """Gets the samba_ips of this InlineResponse20064Data.  # noqa: E501


        :return: The samba_ips of this InlineResponse20064Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._samba_ips

    @samba_ips.setter
    def samba_ips(self, samba_ips):
        """Sets the samba_ips of this InlineResponse20064Data.


        :param samba_ips: The samba_ips of this InlineResponse20064Data.  # noqa: E501
        :type: list[str]
        """

        self._samba_ips = samba_ips

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20064Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20064Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
