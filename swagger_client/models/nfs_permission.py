# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NfsPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'privileged_port': 'bool',
        'id': 'str',
        'obs_direct': 'bool',
        'anon_uid': 'str',
        'manage_gids': 'bool',
        'custom_options': 'str',
        'filesystem': 'str',
        'uid': 'str',
        'group': 'str',
        'filesystem_id': 'str',
        'permission_type': 'str',
        'path': 'str',
        'root_squashing': 'bool',
        'anon_gid': 'str'
    }

    attribute_map = {
        'group_id': 'group_id',
        'privileged_port': 'privileged_port',
        'id': 'id',
        'obs_direct': 'obs_direct',
        'anon_uid': 'anon_uid',
        'manage_gids': 'manage_gids',
        'custom_options': 'custom_options',
        'filesystem': 'filesystem',
        'uid': 'uid',
        'group': 'group',
        'filesystem_id': 'filesystem_id',
        'permission_type': 'permission_type',
        'path': 'path',
        'root_squashing': 'root_squashing',
        'anon_gid': 'anon_gid'
    }

    def __init__(self, group_id=None, privileged_port=None, id=None, obs_direct=None, anon_uid=None, manage_gids=None, custom_options=None, filesystem=None, uid=None, group=None, filesystem_id=None, permission_type=None, path=None, root_squashing=None, anon_gid=None):  # noqa: E501
        """NfsPermission - a model defined in Swagger"""  # noqa: E501
        self._group_id = None
        self._privileged_port = None
        self._id = None
        self._obs_direct = None
        self._anon_uid = None
        self._manage_gids = None
        self._custom_options = None
        self._filesystem = None
        self._uid = None
        self._group = None
        self._filesystem_id = None
        self._permission_type = None
        self._path = None
        self._root_squashing = None
        self._anon_gid = None
        self.discriminator = None
        if group_id is not None:
            self.group_id = group_id
        if privileged_port is not None:
            self.privileged_port = privileged_port
        if id is not None:
            self.id = id
        if obs_direct is not None:
            self.obs_direct = obs_direct
        if anon_uid is not None:
            self.anon_uid = anon_uid
        if manage_gids is not None:
            self.manage_gids = manage_gids
        if custom_options is not None:
            self.custom_options = custom_options
        if filesystem is not None:
            self.filesystem = filesystem
        if uid is not None:
            self.uid = uid
        if group is not None:
            self.group = group
        if filesystem_id is not None:
            self.filesystem_id = filesystem_id
        if permission_type is not None:
            self.permission_type = permission_type
        if path is not None:
            self.path = path
        if root_squashing is not None:
            self.root_squashing = root_squashing
        if anon_gid is not None:
            self.anon_gid = anon_gid

    @property
    def group_id(self):
        """Gets the group_id of this NfsPermission.  # noqa: E501


        :return: The group_id of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NfsPermission.


        :param group_id: The group_id of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def privileged_port(self):
        """Gets the privileged_port of this NfsPermission.  # noqa: E501


        :return: The privileged_port of this NfsPermission.  # noqa: E501
        :rtype: bool
        """
        return self._privileged_port

    @privileged_port.setter
    def privileged_port(self, privileged_port):
        """Sets the privileged_port of this NfsPermission.


        :param privileged_port: The privileged_port of this NfsPermission.  # noqa: E501
        :type: bool
        """

        self._privileged_port = privileged_port

    @property
    def id(self):
        """Gets the id of this NfsPermission.  # noqa: E501


        :return: The id of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NfsPermission.


        :param id: The id of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def obs_direct(self):
        """Gets the obs_direct of this NfsPermission.  # noqa: E501


        :return: The obs_direct of this NfsPermission.  # noqa: E501
        :rtype: bool
        """
        return self._obs_direct

    @obs_direct.setter
    def obs_direct(self, obs_direct):
        """Sets the obs_direct of this NfsPermission.


        :param obs_direct: The obs_direct of this NfsPermission.  # noqa: E501
        :type: bool
        """

        self._obs_direct = obs_direct

    @property
    def anon_uid(self):
        """Gets the anon_uid of this NfsPermission.  # noqa: E501


        :return: The anon_uid of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._anon_uid

    @anon_uid.setter
    def anon_uid(self, anon_uid):
        """Sets the anon_uid of this NfsPermission.


        :param anon_uid: The anon_uid of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._anon_uid = anon_uid

    @property
    def manage_gids(self):
        """Gets the manage_gids of this NfsPermission.  # noqa: E501


        :return: The manage_gids of this NfsPermission.  # noqa: E501
        :rtype: bool
        """
        return self._manage_gids

    @manage_gids.setter
    def manage_gids(self, manage_gids):
        """Sets the manage_gids of this NfsPermission.


        :param manage_gids: The manage_gids of this NfsPermission.  # noqa: E501
        :type: bool
        """

        self._manage_gids = manage_gids

    @property
    def custom_options(self):
        """Gets the custom_options of this NfsPermission.  # noqa: E501


        :return: The custom_options of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._custom_options

    @custom_options.setter
    def custom_options(self, custom_options):
        """Sets the custom_options of this NfsPermission.


        :param custom_options: The custom_options of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._custom_options = custom_options

    @property
    def filesystem(self):
        """Gets the filesystem of this NfsPermission.  # noqa: E501


        :return: The filesystem of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem):
        """Sets the filesystem of this NfsPermission.


        :param filesystem: The filesystem of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._filesystem = filesystem

    @property
    def uid(self):
        """Gets the uid of this NfsPermission.  # noqa: E501


        :return: The uid of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this NfsPermission.


        :param uid: The uid of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def group(self):
        """Gets the group of this NfsPermission.  # noqa: E501


        :return: The group of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NfsPermission.


        :param group: The group of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def filesystem_id(self):
        """Gets the filesystem_id of this NfsPermission.  # noqa: E501


        :return: The filesystem_id of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_id

    @filesystem_id.setter
    def filesystem_id(self, filesystem_id):
        """Sets the filesystem_id of this NfsPermission.


        :param filesystem_id: The filesystem_id of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._filesystem_id = filesystem_id

    @property
    def permission_type(self):
        """Gets the permission_type of this NfsPermission.  # noqa: E501


        :return: The permission_type of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this NfsPermission.


        :param permission_type: The permission_type of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._permission_type = permission_type

    @property
    def path(self):
        """Gets the path of this NfsPermission.  # noqa: E501


        :return: The path of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NfsPermission.


        :param path: The path of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def root_squashing(self):
        """Gets the root_squashing of this NfsPermission.  # noqa: E501


        :return: The root_squashing of this NfsPermission.  # noqa: E501
        :rtype: bool
        """
        return self._root_squashing

    @root_squashing.setter
    def root_squashing(self, root_squashing):
        """Sets the root_squashing of this NfsPermission.


        :param root_squashing: The root_squashing of this NfsPermission.  # noqa: E501
        :type: bool
        """

        self._root_squashing = root_squashing

    @property
    def anon_gid(self):
        """Gets the anon_gid of this NfsPermission.  # noqa: E501


        :return: The anon_gid of this NfsPermission.  # noqa: E501
        :rtype: str
        """
        return self._anon_gid

    @anon_gid.setter
    def anon_gid(self, anon_gid):
        """Sets the anon_gid of this NfsPermission.


        :param anon_gid: The anon_gid of this NfsPermission.  # noqa: E501
        :type: str
        """

        self._anon_gid = anon_gid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
