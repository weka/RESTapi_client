# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20077Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_estimated_bytes': 'float',
        'client_estimation_result_type': 'str',
        'retention_secs': 'float',
        'server_estimated_bytes': 'float'
    }

    attribute_map = {
        'client_estimated_bytes': 'client_estimated_bytes',
        'client_estimation_result_type': 'client_estimation_result_type',
        'retention_secs': 'retention_secs',
        'server_estimated_bytes': 'server_estimated_bytes'
    }

    def __init__(self, client_estimated_bytes=None, client_estimation_result_type=None, retention_secs=None, server_estimated_bytes=None):  # noqa: E501
        """InlineResponse20077Data - a model defined in Swagger"""  # noqa: E501
        self._client_estimated_bytes = None
        self._client_estimation_result_type = None
        self._retention_secs = None
        self._server_estimated_bytes = None
        self.discriminator = None
        if client_estimated_bytes is not None:
            self.client_estimated_bytes = client_estimated_bytes
        if client_estimation_result_type is not None:
            self.client_estimation_result_type = client_estimation_result_type
        if retention_secs is not None:
            self.retention_secs = retention_secs
        if server_estimated_bytes is not None:
            self.server_estimated_bytes = server_estimated_bytes

    @property
    def client_estimated_bytes(self):
        """Gets the client_estimated_bytes of this InlineResponse20077Data.  # noqa: E501


        :return: The client_estimated_bytes of this InlineResponse20077Data.  # noqa: E501
        :rtype: float
        """
        return self._client_estimated_bytes

    @client_estimated_bytes.setter
    def client_estimated_bytes(self, client_estimated_bytes):
        """Sets the client_estimated_bytes of this InlineResponse20077Data.


        :param client_estimated_bytes: The client_estimated_bytes of this InlineResponse20077Data.  # noqa: E501
        :type: float
        """

        self._client_estimated_bytes = client_estimated_bytes

    @property
    def client_estimation_result_type(self):
        """Gets the client_estimation_result_type of this InlineResponse20077Data.  # noqa: E501


        :return: The client_estimation_result_type of this InlineResponse20077Data.  # noqa: E501
        :rtype: str
        """
        return self._client_estimation_result_type

    @client_estimation_result_type.setter
    def client_estimation_result_type(self, client_estimation_result_type):
        """Sets the client_estimation_result_type of this InlineResponse20077Data.


        :param client_estimation_result_type: The client_estimation_result_type of this InlineResponse20077Data.  # noqa: E501
        :type: str
        """

        self._client_estimation_result_type = client_estimation_result_type

    @property
    def retention_secs(self):
        """Gets the retention_secs of this InlineResponse20077Data.  # noqa: E501


        :return: The retention_secs of this InlineResponse20077Data.  # noqa: E501
        :rtype: float
        """
        return self._retention_secs

    @retention_secs.setter
    def retention_secs(self, retention_secs):
        """Sets the retention_secs of this InlineResponse20077Data.


        :param retention_secs: The retention_secs of this InlineResponse20077Data.  # noqa: E501
        :type: float
        """

        self._retention_secs = retention_secs

    @property
    def server_estimated_bytes(self):
        """Gets the server_estimated_bytes of this InlineResponse20077Data.  # noqa: E501


        :return: The server_estimated_bytes of this InlineResponse20077Data.  # noqa: E501
        :rtype: float
        """
        return self._server_estimated_bytes

    @server_estimated_bytes.setter
    def server_estimated_bytes(self, server_estimated_bytes):
        """Sets the server_estimated_bytes of this InlineResponse20077Data.


        :param server_estimated_bytes: The server_estimated_bytes of this InlineResponse20077Data.  # noqa: E501
        :type: float
        """

        self._server_estimated_bytes = server_estimated_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20077Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20077Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
