# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LifecycleRulesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiry_days': 'str',
        'prefix': 'str',
        'tags': 'str'
    }

    attribute_map = {
        'expiry_days': 'expiry_days',
        'prefix': 'prefix',
        'tags': 'tags'
    }

    def __init__(self, expiry_days=None, prefix=None, tags=None):  # noqa: E501
        """LifecycleRulesBody - a model defined in Swagger"""  # noqa: E501
        self._expiry_days = None
        self._prefix = None
        self._tags = None
        self.discriminator = None
        self.expiry_days = expiry_days
        if prefix is not None:
            self.prefix = prefix
        if tags is not None:
            self.tags = tags

    @property
    def expiry_days(self):
        """Gets the expiry_days of this LifecycleRulesBody.  # noqa: E501

        expiry days  # noqa: E501

        :return: The expiry_days of this LifecycleRulesBody.  # noqa: E501
        :rtype: str
        """
        return self._expiry_days

    @expiry_days.setter
    def expiry_days(self, expiry_days):
        """Sets the expiry_days of this LifecycleRulesBody.

        expiry days  # noqa: E501

        :param expiry_days: The expiry_days of this LifecycleRulesBody.  # noqa: E501
        :type: str
        """
        if expiry_days is None:
            raise ValueError("Invalid value for `expiry_days`, must not be `None`")  # noqa: E501

        self._expiry_days = expiry_days

    @property
    def prefix(self):
        """Gets the prefix of this LifecycleRulesBody.  # noqa: E501

        bucket prefix  # noqa: E501

        :return: The prefix of this LifecycleRulesBody.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this LifecycleRulesBody.

        bucket prefix  # noqa: E501

        :param prefix: The prefix of this LifecycleRulesBody.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def tags(self):
        """Gets the tags of this LifecycleRulesBody.  # noqa: E501

        object tags dictionary  # noqa: E501

        :return: The tags of this LifecycleRulesBody.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LifecycleRulesBody.

        object tags dictionary  # noqa: E501

        :param tags: The tags of this LifecycleRulesBody.  # noqa: E501
        :type: str
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifecycleRulesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifecycleRulesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
