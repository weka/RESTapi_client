# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20010Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'range_available': 'float',
        'range': 'str',
        'gateway': 'str',
        'netmask': 'float'
    }

    attribute_map = {
        'range_available': 'range_available',
        'range': 'range',
        'gateway': 'gateway',
        'netmask': 'netmask'
    }

    def __init__(self, range_available=None, range=None, gateway=None, netmask=None):  # noqa: E501
        """InlineResponse20010Data - a model defined in Swagger"""  # noqa: E501
        self._range_available = None
        self._range = None
        self._gateway = None
        self._netmask = None
        self.discriminator = None
        if range_available is not None:
            self.range_available = range_available
        if range is not None:
            self.range = range
        if gateway is not None:
            self.gateway = gateway
        if netmask is not None:
            self.netmask = netmask

    @property
    def range_available(self):
        """Gets the range_available of this InlineResponse20010Data.  # noqa: E501


        :return: The range_available of this InlineResponse20010Data.  # noqa: E501
        :rtype: float
        """
        return self._range_available

    @range_available.setter
    def range_available(self, range_available):
        """Sets the range_available of this InlineResponse20010Data.


        :param range_available: The range_available of this InlineResponse20010Data.  # noqa: E501
        :type: float
        """

        self._range_available = range_available

    @property
    def range(self):
        """Gets the range of this InlineResponse20010Data.  # noqa: E501

        IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)  # noqa: E501

        :return: The range of this InlineResponse20010Data.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this InlineResponse20010Data.

        IP range (format - A.B.C.D-E.F.G.H or A.B.C.D-F.G.H or A.B.C.D-G.H or A.B.C.D-H)  # noqa: E501

        :param range: The range of this InlineResponse20010Data.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def gateway(self):
        """Gets the gateway of this InlineResponse20010Data.  # noqa: E501

        Default gateway IP  # noqa: E501

        :return: The gateway of this InlineResponse20010Data.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InlineResponse20010Data.

        Default gateway IP  # noqa: E501

        :param gateway: The gateway of this InlineResponse20010Data.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def netmask(self):
        """Gets the netmask of this InlineResponse20010Data.  # noqa: E501

        Subnet mask bits (0..32)  # noqa: E501

        :return: The netmask of this InlineResponse20010Data.  # noqa: E501
        :rtype: float
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this InlineResponse20010Data.

        Subnet mask bits (0..32)  # noqa: E501

        :param netmask: The netmask of this InlineResponse20010Data.  # noqa: E501
        :type: float
        """

        self._netmask = netmask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20010Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20010Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
