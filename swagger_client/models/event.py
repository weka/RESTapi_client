# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'cloud_digested_ts': 'str',
        'cloud_id': 'str',
        'description': 'str',
        'entity': 'str',
        'guid': 'str',
        'hash': 'float',
        'is_backend': 'bool',
        'nid': 'str',
        'org_id': 'str',
        'params': 'EventParams',
        'permission': 'str',
        'processed': 'bool',
        's3_time': 'str',
        'severity': 'str',
        'sqs_message_time': 'str',
        'timestamp': 'str',
        'type': 'str'
    }

    attribute_map = {
        'category': 'category',
        'cloud_digested_ts': 'cloud_digested_ts',
        'cloud_id': 'cloud_id',
        'description': 'description',
        'entity': 'entity',
        'guid': 'guid',
        'hash': 'hash',
        'is_backend': 'is_backend',
        'nid': 'nid',
        'org_id': 'org_id',
        'params': 'params',
        'permission': 'permission',
        'processed': 'processed',
        's3_time': 's3_time',
        'severity': 'severity',
        'sqs_message_time': 'sqs_message_time',
        'timestamp': 'timestamp',
        'type': 'type'
    }

    def __init__(self, category=None, cloud_digested_ts=None, cloud_id=None, description=None, entity=None, guid=None, hash=None, is_backend=None, nid=None, org_id=None, params=None, permission=None, processed=None, s3_time=None, severity=None, sqs_message_time=None, timestamp=None, type=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._cloud_digested_ts = None
        self._cloud_id = None
        self._description = None
        self._entity = None
        self._guid = None
        self._hash = None
        self._is_backend = None
        self._nid = None
        self._org_id = None
        self._params = None
        self._permission = None
        self._processed = None
        self._s3_time = None
        self._severity = None
        self._sqs_message_time = None
        self._timestamp = None
        self._type = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if cloud_digested_ts is not None:
            self.cloud_digested_ts = cloud_digested_ts
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if description is not None:
            self.description = description
        if entity is not None:
            self.entity = entity
        if guid is not None:
            self.guid = guid
        if hash is not None:
            self.hash = hash
        if is_backend is not None:
            self.is_backend = is_backend
        if nid is not None:
            self.nid = nid
        if org_id is not None:
            self.org_id = org_id
        if params is not None:
            self.params = params
        if permission is not None:
            self.permission = permission
        if processed is not None:
            self.processed = processed
        if s3_time is not None:
            self.s3_time = s3_time
        if severity is not None:
            self.severity = severity
        if sqs_message_time is not None:
            self.sqs_message_time = sqs_message_time
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type

    @property
    def category(self):
        """Gets the category of this Event.  # noqa: E501


        :return: The category of this Event.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Event.


        :param category: The category of this Event.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def cloud_digested_ts(self):
        """Gets the cloud_digested_ts of this Event.  # noqa: E501


        :return: The cloud_digested_ts of this Event.  # noqa: E501
        :rtype: str
        """
        return self._cloud_digested_ts

    @cloud_digested_ts.setter
    def cloud_digested_ts(self, cloud_digested_ts):
        """Sets the cloud_digested_ts of this Event.


        :param cloud_digested_ts: The cloud_digested_ts of this Event.  # noqa: E501
        :type: str
        """

        self._cloud_digested_ts = cloud_digested_ts

    @property
    def cloud_id(self):
        """Gets the cloud_id of this Event.  # noqa: E501


        :return: The cloud_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this Event.


        :param cloud_id: The cloud_id of this Event.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def description(self):
        """Gets the description of this Event.  # noqa: E501


        :return: The description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity(self):
        """Gets the entity of this Event.  # noqa: E501


        :return: The entity of this Event.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Event.


        :param entity: The entity of this Event.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def guid(self):
        """Gets the guid of this Event.  # noqa: E501


        :return: The guid of this Event.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Event.


        :param guid: The guid of this Event.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def hash(self):
        """Gets the hash of this Event.  # noqa: E501


        :return: The hash of this Event.  # noqa: E501
        :rtype: float
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Event.


        :param hash: The hash of this Event.  # noqa: E501
        :type: float
        """

        self._hash = hash

    @property
    def is_backend(self):
        """Gets the is_backend of this Event.  # noqa: E501


        :return: The is_backend of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_backend

    @is_backend.setter
    def is_backend(self, is_backend):
        """Sets the is_backend of this Event.


        :param is_backend: The is_backend of this Event.  # noqa: E501
        :type: bool
        """

        self._is_backend = is_backend

    @property
    def nid(self):
        """Gets the nid of this Event.  # noqa: E501


        :return: The nid of this Event.  # noqa: E501
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this Event.


        :param nid: The nid of this Event.  # noqa: E501
        :type: str
        """

        self._nid = nid

    @property
    def org_id(self):
        """Gets the org_id of this Event.  # noqa: E501


        :return: The org_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Event.


        :param org_id: The org_id of this Event.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def params(self):
        """Gets the params of this Event.  # noqa: E501


        :return: The params of this Event.  # noqa: E501
        :rtype: EventParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Event.


        :param params: The params of this Event.  # noqa: E501
        :type: EventParams
        """

        self._params = params

    @property
    def permission(self):
        """Gets the permission of this Event.  # noqa: E501


        :return: The permission of this Event.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Event.


        :param permission: The permission of this Event.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def processed(self):
        """Gets the processed of this Event.  # noqa: E501


        :return: The processed of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this Event.


        :param processed: The processed of this Event.  # noqa: E501
        :type: bool
        """

        self._processed = processed

    @property
    def s3_time(self):
        """Gets the s3_time of this Event.  # noqa: E501


        :return: The s3_time of this Event.  # noqa: E501
        :rtype: str
        """
        return self._s3_time

    @s3_time.setter
    def s3_time(self, s3_time):
        """Sets the s3_time of this Event.


        :param s3_time: The s3_time of this Event.  # noqa: E501
        :type: str
        """

        self._s3_time = s3_time

    @property
    def severity(self):
        """Gets the severity of this Event.  # noqa: E501


        :return: The severity of this Event.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Event.


        :param severity: The severity of this Event.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def sqs_message_time(self):
        """Gets the sqs_message_time of this Event.  # noqa: E501


        :return: The sqs_message_time of this Event.  # noqa: E501
        :rtype: str
        """
        return self._sqs_message_time

    @sqs_message_time.setter
    def sqs_message_time(self, sqs_message_time):
        """Sets the sqs_message_time of this Event.


        :param sqs_message_time: The sqs_message_time of this Event.  # noqa: E501
        :type: str
        """

        self._sqs_message_time = sqs_message_time

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.  # noqa: E501


        :return: The timestamp of this Event.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.


        :param timestamp: The timestamp of this Event.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
