# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DrivesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_format_non_wekafs_drives': 'bool',
        'device_path': 'str',
        'force': 'bool',
        'host_uid': 'str'
    }

    attribute_map = {
        'allow_format_non_wekafs_drives': 'allow_format_non_wekafs_drives',
        'device_path': 'device_path',
        'force': 'force',
        'host_uid': 'host_uid'
    }

    def __init__(self, allow_format_non_wekafs_drives=None, device_path=None, force=None, host_uid=None):  # noqa: E501
        """DrivesBody - a model defined in Swagger"""  # noqa: E501
        self._allow_format_non_wekafs_drives = None
        self._device_path = None
        self._force = None
        self._host_uid = None
        self.discriminator = None
        if allow_format_non_wekafs_drives is not None:
            self.allow_format_non_wekafs_drives = allow_format_non_wekafs_drives
        self.device_path = device_path
        if force is not None:
            self.force = force
        if host_uid is not None:
            self.host_uid = host_uid

    @property
    def allow_format_non_wekafs_drives(self):
        """Gets the allow_format_non_wekafs_drives of this DrivesBody.  # noqa: E501

        Allow reuse of drives formatted by another versions  # noqa: E501

        :return: The allow_format_non_wekafs_drives of this DrivesBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_format_non_wekafs_drives

    @allow_format_non_wekafs_drives.setter
    def allow_format_non_wekafs_drives(self, allow_format_non_wekafs_drives):
        """Sets the allow_format_non_wekafs_drives of this DrivesBody.

        Allow reuse of drives formatted by another versions  # noqa: E501

        :param allow_format_non_wekafs_drives: The allow_format_non_wekafs_drives of this DrivesBody.  # noqa: E501
        :type: bool
        """

        self._allow_format_non_wekafs_drives = allow_format_non_wekafs_drives

    @property
    def device_path(self):
        """Gets the device_path of this DrivesBody.  # noqa: E501

        Device path of the drives to add  # noqa: E501

        :return: The device_path of this DrivesBody.  # noqa: E501
        :rtype: str
        """
        return self._device_path

    @device_path.setter
    def device_path(self, device_path):
        """Sets the device_path of this DrivesBody.

        Device path of the drives to add  # noqa: E501

        :param device_path: The device_path of this DrivesBody.  # noqa: E501
        :type: str
        """
        if device_path is None:
            raise ValueError("Invalid value for `device_path`, must not be `None`")  # noqa: E501

        self._device_path = device_path

    @property
    def force(self):
        """Gets the force of this DrivesBody.  # noqa: E501

        Force formatting the drive, avoiding all safety checks!  # noqa: E501

        :return: The force of this DrivesBody.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this DrivesBody.

        Force formatting the drive, avoiding all safety checks!  # noqa: E501

        :param force: The force of this DrivesBody.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def host_uid(self):
        """Gets the host_uid of this DrivesBody.  # noqa: E501

        The host the drive attached to  # noqa: E501

        :return: The host_uid of this DrivesBody.  # noqa: E501
        :rtype: str
        """
        return self._host_uid

    @host_uid.setter
    def host_uid(self, host_uid):
        """Sets the host_uid of this DrivesBody.

        The host the drive attached to  # noqa: E501

        :param host_uid: The host_uid of this DrivesBody.  # noqa: E501
        :type: str
        """

        self._host_uid = host_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrivesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrivesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
