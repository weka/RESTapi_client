# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'ip': 'str',
        'no_wait': 'bool'
    }

    attribute_map = {
        'hostname': 'hostname',
        'ip': 'ip',
        'no_wait': 'no_wait'
    }

    def __init__(self, hostname=None, ip=None, no_wait=None):  # noqa: E501
        """HostsBody - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._ip = None
        self._no_wait = None
        self.discriminator = None
        self.hostname = hostname
        if ip is not None:
            self.ip = ip
        if no_wait is not None:
            self.no_wait = no_wait

    @property
    def hostname(self):
        """Gets the hostname of this HostsBody.  # noqa: E501

        Management network hostname  # noqa: E501

        :return: The hostname of this HostsBody.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostsBody.

        Management network hostname  # noqa: E501

        :param hostname: The hostname of this HostsBody.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def ip(self):
        """Gets the ip of this HostsBody.  # noqa: E501

        Management IP; If empty, the hostname is resolved; If host is highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>'  # noqa: E501

        :return: The ip of this HostsBody.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this HostsBody.

        Management IP; If empty, the hostname is resolved; If host is highly-available or mixed-networking, use IP set '<ip>+<ip>+...+<ip>'  # noqa: E501

        :param ip: The ip of this HostsBody.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def no_wait(self):
        """Gets the no_wait of this HostsBody.  # noqa: E501


        :return: The no_wait of this HostsBody.  # noqa: E501
        :rtype: bool
        """
        return self._no_wait

    @no_wait.setter
    def no_wait(self, no_wait):
        """Sets the no_wait of this HostsBody.


        :param no_wait: The no_wait of this HostsBody.  # noqa: E501
        :type: bool
        """

        self._no_wait = no_wait

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
