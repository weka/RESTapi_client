# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersPasswordBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_password': 'str',
        'old_password': 'str',
        'org': 'str',
        'username': 'str'
    }

    attribute_map = {
        'new_password': 'new_password',
        'old_password': 'old_password',
        'org': 'org',
        'username': 'username'
    }

    def __init__(self, new_password=None, old_password=None, org=None, username=None):  # noqa: E501
        """UsersPasswordBody - a model defined in Swagger"""  # noqa: E501
        self._new_password = None
        self._old_password = None
        self._org = None
        self._username = None
        self.discriminator = None
        self.new_password = new_password
        self.old_password = old_password
        if org is not None:
            self.org = org
        self.username = username

    @property
    def new_password(self):
        """Gets the new_password of this UsersPasswordBody.  # noqa: E501

        New password  # noqa: E501

        :return: The new_password of this UsersPasswordBody.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UsersPasswordBody.

        New password  # noqa: E501

        :param new_password: The new_password of this UsersPasswordBody.  # noqa: E501
        :type: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")  # noqa: E501

        self._new_password = new_password

    @property
    def old_password(self):
        """Gets the old_password of this UsersPasswordBody.  # noqa: E501

        Old password  # noqa: E501

        :return: The old_password of this UsersPasswordBody.  # noqa: E501
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """Sets the old_password of this UsersPasswordBody.

        Old password  # noqa: E501

        :param old_password: The old_password of this UsersPasswordBody.  # noqa: E501
        :type: str
        """
        if old_password is None:
            raise ValueError("Invalid value for `old_password`, must not be `None`")  # noqa: E501

        self._old_password = old_password

    @property
    def org(self):
        """Gets the org of this UsersPasswordBody.  # noqa: E501

        Organization name, default 'Root'  # noqa: E501

        :return: The org of this UsersPasswordBody.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this UsersPasswordBody.

        Organization name, default 'Root'  # noqa: E501

        :param org: The org of this UsersPasswordBody.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def username(self):
        """Gets the username of this UsersPasswordBody.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this UsersPasswordBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UsersPasswordBody.

        Username  # noqa: E501

        :param username: The username of this UsersPasswordBody.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersPasswordBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersPasswordBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
