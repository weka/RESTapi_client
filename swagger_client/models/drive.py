# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Drive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added_time': 'str',
        'attachment': 'str',
        'block_size': 'float',
        'device_path': 'str',
        'failure_domain': 'str',
        'failure_domain_name': 'str',
        'firmware': 'str',
        'host_id': 'str',
        'hostname': 'str',
        'id': 'str',
        'model': 'str',
        'node_id': 'str',
        'percentage_used': 'str',
        'removed_time': 'str',
        'serial_number': 'str',
        'should_be_active': 'bool',
        'size_bytes': 'float',
        'spares_remaining': 'float',
        'spares_threshold': 'float',
        'state_change_time': 'str',
        'status': 'str',
        'uid': 'str',
        'uuid': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'added_time': 'added_time',
        'attachment': 'attachment',
        'block_size': 'block_size',
        'device_path': 'device_path',
        'failure_domain': 'failure_domain',
        'failure_domain_name': 'failure_domain_name',
        'firmware': 'firmware',
        'host_id': 'host_id',
        'hostname': 'hostname',
        'id': 'id',
        'model': 'model',
        'node_id': 'node_id',
        'percentage_used': 'percentage_used',
        'removed_time': 'removed_time',
        'serial_number': 'serial_number',
        'should_be_active': 'should_be_active',
        'size_bytes': 'size_bytes',
        'spares_remaining': 'spares_remaining',
        'spares_threshold': 'spares_threshold',
        'state_change_time': 'state_change_time',
        'status': 'status',
        'uid': 'uid',
        'uuid': 'uuid',
        'vendor': 'vendor'
    }

    def __init__(self, added_time=None, attachment=None, block_size=None, device_path=None, failure_domain=None, failure_domain_name=None, firmware=None, host_id=None, hostname=None, id=None, model=None, node_id=None, percentage_used=None, removed_time=None, serial_number=None, should_be_active=None, size_bytes=None, spares_remaining=None, spares_threshold=None, state_change_time=None, status=None, uid=None, uuid=None, vendor=None):  # noqa: E501
        """Drive - a model defined in Swagger"""  # noqa: E501
        self._added_time = None
        self._attachment = None
        self._block_size = None
        self._device_path = None
        self._failure_domain = None
        self._failure_domain_name = None
        self._firmware = None
        self._host_id = None
        self._hostname = None
        self._id = None
        self._model = None
        self._node_id = None
        self._percentage_used = None
        self._removed_time = None
        self._serial_number = None
        self._should_be_active = None
        self._size_bytes = None
        self._spares_remaining = None
        self._spares_threshold = None
        self._state_change_time = None
        self._status = None
        self._uid = None
        self._uuid = None
        self._vendor = None
        self.discriminator = None
        if added_time is not None:
            self.added_time = added_time
        if attachment is not None:
            self.attachment = attachment
        if block_size is not None:
            self.block_size = block_size
        if device_path is not None:
            self.device_path = device_path
        if failure_domain is not None:
            self.failure_domain = failure_domain
        if failure_domain_name is not None:
            self.failure_domain_name = failure_domain_name
        if firmware is not None:
            self.firmware = firmware
        if host_id is not None:
            self.host_id = host_id
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if node_id is not None:
            self.node_id = node_id
        if percentage_used is not None:
            self.percentage_used = percentage_used
        if removed_time is not None:
            self.removed_time = removed_time
        if serial_number is not None:
            self.serial_number = serial_number
        if should_be_active is not None:
            self.should_be_active = should_be_active
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if spares_remaining is not None:
            self.spares_remaining = spares_remaining
        if spares_threshold is not None:
            self.spares_threshold = spares_threshold
        if state_change_time is not None:
            self.state_change_time = state_change_time
        if status is not None:
            self.status = status
        if uid is not None:
            self.uid = uid
        if uuid is not None:
            self.uuid = uuid
        if vendor is not None:
            self.vendor = vendor

    @property
    def added_time(self):
        """Gets the added_time of this Drive.  # noqa: E501


        :return: The added_time of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._added_time

    @added_time.setter
    def added_time(self, added_time):
        """Sets the added_time of this Drive.


        :param added_time: The added_time of this Drive.  # noqa: E501
        :type: str
        """

        self._added_time = added_time

    @property
    def attachment(self):
        """Gets the attachment of this Drive.  # noqa: E501


        :return: The attachment of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Drive.


        :param attachment: The attachment of this Drive.  # noqa: E501
        :type: str
        """

        self._attachment = attachment

    @property
    def block_size(self):
        """Gets the block_size of this Drive.  # noqa: E501


        :return: The block_size of this Drive.  # noqa: E501
        :rtype: float
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this Drive.


        :param block_size: The block_size of this Drive.  # noqa: E501
        :type: float
        """

        self._block_size = block_size

    @property
    def device_path(self):
        """Gets the device_path of this Drive.  # noqa: E501


        :return: The device_path of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._device_path

    @device_path.setter
    def device_path(self, device_path):
        """Sets the device_path of this Drive.


        :param device_path: The device_path of this Drive.  # noqa: E501
        :type: str
        """

        self._device_path = device_path

    @property
    def failure_domain(self):
        """Gets the failure_domain of this Drive.  # noqa: E501


        :return: The failure_domain of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain

    @failure_domain.setter
    def failure_domain(self, failure_domain):
        """Sets the failure_domain of this Drive.


        :param failure_domain: The failure_domain of this Drive.  # noqa: E501
        :type: str
        """

        self._failure_domain = failure_domain

    @property
    def failure_domain_name(self):
        """Gets the failure_domain_name of this Drive.  # noqa: E501


        :return: The failure_domain_name of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain_name

    @failure_domain_name.setter
    def failure_domain_name(self, failure_domain_name):
        """Sets the failure_domain_name of this Drive.


        :param failure_domain_name: The failure_domain_name of this Drive.  # noqa: E501
        :type: str
        """

        self._failure_domain_name = failure_domain_name

    @property
    def firmware(self):
        """Gets the firmware of this Drive.  # noqa: E501


        :return: The firmware of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this Drive.


        :param firmware: The firmware of this Drive.  # noqa: E501
        :type: str
        """

        self._firmware = firmware

    @property
    def host_id(self):
        """Gets the host_id of this Drive.  # noqa: E501


        :return: The host_id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this Drive.


        :param host_id: The host_id of this Drive.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def hostname(self):
        """Gets the hostname of this Drive.  # noqa: E501


        :return: The hostname of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Drive.


        :param hostname: The hostname of this Drive.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this Drive.  # noqa: E501


        :return: The id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Drive.


        :param id: The id of this Drive.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this Drive.  # noqa: E501


        :return: The model of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Drive.


        :param model: The model of this Drive.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def node_id(self):
        """Gets the node_id of this Drive.  # noqa: E501


        :return: The node_id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Drive.


        :param node_id: The node_id of this Drive.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def percentage_used(self):
        """Gets the percentage_used of this Drive.  # noqa: E501


        :return: The percentage_used of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._percentage_used

    @percentage_used.setter
    def percentage_used(self, percentage_used):
        """Sets the percentage_used of this Drive.


        :param percentage_used: The percentage_used of this Drive.  # noqa: E501
        :type: str
        """

        self._percentage_used = percentage_used

    @property
    def removed_time(self):
        """Gets the removed_time of this Drive.  # noqa: E501


        :return: The removed_time of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._removed_time

    @removed_time.setter
    def removed_time(self, removed_time):
        """Sets the removed_time of this Drive.


        :param removed_time: The removed_time of this Drive.  # noqa: E501
        :type: str
        """

        self._removed_time = removed_time

    @property
    def serial_number(self):
        """Gets the serial_number of this Drive.  # noqa: E501


        :return: The serial_number of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Drive.


        :param serial_number: The serial_number of this Drive.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def should_be_active(self):
        """Gets the should_be_active of this Drive.  # noqa: E501


        :return: The should_be_active of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._should_be_active

    @should_be_active.setter
    def should_be_active(self, should_be_active):
        """Sets the should_be_active of this Drive.


        :param should_be_active: The should_be_active of this Drive.  # noqa: E501
        :type: bool
        """

        self._should_be_active = should_be_active

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Drive.  # noqa: E501


        :return: The size_bytes of this Drive.  # noqa: E501
        :rtype: float
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Drive.


        :param size_bytes: The size_bytes of this Drive.  # noqa: E501
        :type: float
        """

        self._size_bytes = size_bytes

    @property
    def spares_remaining(self):
        """Gets the spares_remaining of this Drive.  # noqa: E501


        :return: The spares_remaining of this Drive.  # noqa: E501
        :rtype: float
        """
        return self._spares_remaining

    @spares_remaining.setter
    def spares_remaining(self, spares_remaining):
        """Sets the spares_remaining of this Drive.


        :param spares_remaining: The spares_remaining of this Drive.  # noqa: E501
        :type: float
        """

        self._spares_remaining = spares_remaining

    @property
    def spares_threshold(self):
        """Gets the spares_threshold of this Drive.  # noqa: E501


        :return: The spares_threshold of this Drive.  # noqa: E501
        :rtype: float
        """
        return self._spares_threshold

    @spares_threshold.setter
    def spares_threshold(self, spares_threshold):
        """Sets the spares_threshold of this Drive.


        :param spares_threshold: The spares_threshold of this Drive.  # noqa: E501
        :type: float
        """

        self._spares_threshold = spares_threshold

    @property
    def state_change_time(self):
        """Gets the state_change_time of this Drive.  # noqa: E501


        :return: The state_change_time of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._state_change_time

    @state_change_time.setter
    def state_change_time(self, state_change_time):
        """Sets the state_change_time of this Drive.


        :param state_change_time: The state_change_time of this Drive.  # noqa: E501
        :type: str
        """

        self._state_change_time = state_change_time

    @property
    def status(self):
        """Gets the status of this Drive.  # noqa: E501


        :return: The status of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Drive.


        :param status: The status of this Drive.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def uid(self):
        """Gets the uid of this Drive.  # noqa: E501


        :return: The uid of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Drive.


        :param uid: The uid of this Drive.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def uuid(self):
        """Gets the uuid of this Drive.  # noqa: E501


        :return: The uuid of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Drive.


        :param uuid: The uuid of this Drive.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor(self):
        """Gets the vendor of this Drive.  # noqa: E501


        :return: The vendor of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Drive.


        :param vendor: The vendor of this Drive.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Drive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Drive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
