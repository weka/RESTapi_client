# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20081Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'params': 'InlineResponse20081Params',
        'uid': 'str',
        'progress': 'float',
        'type': 'str',
        'description': 'str',
        'is_explicitly_paused': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'params': 'params',
        'uid': 'uid',
        'progress': 'progress',
        'type': 'type',
        'description': 'description',
        'is_explicitly_paused': 'is_explicitly_paused'
    }

    def __init__(self, id=None, state=None, params=None, uid=None, progress=None, type=None, description=None, is_explicitly_paused=None):  # noqa: E501
        """InlineResponse20081Data - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._state = None
        self._params = None
        self._uid = None
        self._progress = None
        self._type = None
        self._description = None
        self._is_explicitly_paused = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if params is not None:
            self.params = params
        if uid is not None:
            self.uid = uid
        if progress is not None:
            self.progress = progress
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if is_explicitly_paused is not None:
            self.is_explicitly_paused = is_explicitly_paused

    @property
    def id(self):
        """Gets the id of this InlineResponse20081Data.  # noqa: E501


        :return: The id of this InlineResponse20081Data.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20081Data.


        :param id: The id of this InlineResponse20081Data.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this InlineResponse20081Data.  # noqa: E501


        :return: The state of this InlineResponse20081Data.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20081Data.


        :param state: The state of this InlineResponse20081Data.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def params(self):
        """Gets the params of this InlineResponse20081Data.  # noqa: E501


        :return: The params of this InlineResponse20081Data.  # noqa: E501
        :rtype: InlineResponse20081Params
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this InlineResponse20081Data.


        :param params: The params of this InlineResponse20081Data.  # noqa: E501
        :type: InlineResponse20081Params
        """

        self._params = params

    @property
    def uid(self):
        """Gets the uid of this InlineResponse20081Data.  # noqa: E501


        :return: The uid of this InlineResponse20081Data.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this InlineResponse20081Data.


        :param uid: The uid of this InlineResponse20081Data.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def progress(self):
        """Gets the progress of this InlineResponse20081Data.  # noqa: E501


        :return: The progress of this InlineResponse20081Data.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this InlineResponse20081Data.


        :param progress: The progress of this InlineResponse20081Data.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def type(self):
        """Gets the type of this InlineResponse20081Data.  # noqa: E501


        :return: The type of this InlineResponse20081Data.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20081Data.


        :param type: The type of this InlineResponse20081Data.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this InlineResponse20081Data.  # noqa: E501


        :return: The description of this InlineResponse20081Data.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20081Data.


        :param description: The description of this InlineResponse20081Data.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_explicitly_paused(self):
        """Gets the is_explicitly_paused of this InlineResponse20081Data.  # noqa: E501


        :return: The is_explicitly_paused of this InlineResponse20081Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_explicitly_paused

    @is_explicitly_paused.setter
    def is_explicitly_paused(self, is_explicitly_paused):
        """Sets the is_explicitly_paused of this InlineResponse20081Data.


        :param is_explicitly_paused: The is_explicitly_paused of this InlineResponse20081Data.  # noqa: E501
        :type: bool
        """

        self._is_explicitly_paused = is_explicitly_paused

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20081Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20081Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
