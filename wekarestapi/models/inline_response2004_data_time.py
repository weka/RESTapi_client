# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004DataTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_clock_skew_secs': 'float',
        'cluster_local_utc_offset': 'str',
        'cluster_local_utc_offset_seconds': 'float',
        'cluster_time': 'str'
    }

    attribute_map = {
        'allowed_clock_skew_secs': 'allowed_clock_skew_secs',
        'cluster_local_utc_offset': 'cluster_local_utc_offset',
        'cluster_local_utc_offset_seconds': 'cluster_local_utc_offset_seconds',
        'cluster_time': 'cluster_time'
    }

    def __init__(self, allowed_clock_skew_secs=None, cluster_local_utc_offset=None, cluster_local_utc_offset_seconds=None, cluster_time=None):  # noqa: E501
        """InlineResponse2004DataTime - a model defined in Swagger"""  # noqa: E501
        self._allowed_clock_skew_secs = None
        self._cluster_local_utc_offset = None
        self._cluster_local_utc_offset_seconds = None
        self._cluster_time = None
        self.discriminator = None
        if allowed_clock_skew_secs is not None:
            self.allowed_clock_skew_secs = allowed_clock_skew_secs
        if cluster_local_utc_offset is not None:
            self.cluster_local_utc_offset = cluster_local_utc_offset
        if cluster_local_utc_offset_seconds is not None:
            self.cluster_local_utc_offset_seconds = cluster_local_utc_offset_seconds
        if cluster_time is not None:
            self.cluster_time = cluster_time

    @property
    def allowed_clock_skew_secs(self):
        """Gets the allowed_clock_skew_secs of this InlineResponse2004DataTime.  # noqa: E501


        :return: The allowed_clock_skew_secs of this InlineResponse2004DataTime.  # noqa: E501
        :rtype: float
        """
        return self._allowed_clock_skew_secs

    @allowed_clock_skew_secs.setter
    def allowed_clock_skew_secs(self, allowed_clock_skew_secs):
        """Sets the allowed_clock_skew_secs of this InlineResponse2004DataTime.


        :param allowed_clock_skew_secs: The allowed_clock_skew_secs of this InlineResponse2004DataTime.  # noqa: E501
        :type: float
        """

        self._allowed_clock_skew_secs = allowed_clock_skew_secs

    @property
    def cluster_local_utc_offset(self):
        """Gets the cluster_local_utc_offset of this InlineResponse2004DataTime.  # noqa: E501


        :return: The cluster_local_utc_offset of this InlineResponse2004DataTime.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_utc_offset

    @cluster_local_utc_offset.setter
    def cluster_local_utc_offset(self, cluster_local_utc_offset):
        """Sets the cluster_local_utc_offset of this InlineResponse2004DataTime.


        :param cluster_local_utc_offset: The cluster_local_utc_offset of this InlineResponse2004DataTime.  # noqa: E501
        :type: str
        """

        self._cluster_local_utc_offset = cluster_local_utc_offset

    @property
    def cluster_local_utc_offset_seconds(self):
        """Gets the cluster_local_utc_offset_seconds of this InlineResponse2004DataTime.  # noqa: E501


        :return: The cluster_local_utc_offset_seconds of this InlineResponse2004DataTime.  # noqa: E501
        :rtype: float
        """
        return self._cluster_local_utc_offset_seconds

    @cluster_local_utc_offset_seconds.setter
    def cluster_local_utc_offset_seconds(self, cluster_local_utc_offset_seconds):
        """Sets the cluster_local_utc_offset_seconds of this InlineResponse2004DataTime.


        :param cluster_local_utc_offset_seconds: The cluster_local_utc_offset_seconds of this InlineResponse2004DataTime.  # noqa: E501
        :type: float
        """

        self._cluster_local_utc_offset_seconds = cluster_local_utc_offset_seconds

    @property
    def cluster_time(self):
        """Gets the cluster_time of this InlineResponse2004DataTime.  # noqa: E501


        :return: The cluster_time of this InlineResponse2004DataTime.  # noqa: E501
        :rtype: str
        """
        return self._cluster_time

    @cluster_time.setter
    def cluster_time(self, cluster_time):
        """Sets the cluster_time of this InlineResponse2004DataTime.


        :param cluster_time: The cluster_time of this InlineResponse2004DataTime.  # noqa: E501
        :type: str
        """

        self._cluster_time = cluster_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004DataTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004DataTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
