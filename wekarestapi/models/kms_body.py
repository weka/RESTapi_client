# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KmsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_url': 'str',
        'ca_cert_pem': 'str',
        'client_cert_pem': 'str',
        'client_key_pem': 'str',
        'key_uid': 'str',
        'master_key_name': 'str',
        'server_endpoint': 'str',
        'token': 'str'
    }

    attribute_map = {
        'base_url': 'base_url',
        'ca_cert_pem': 'ca_cert_pem',
        'client_cert_pem': 'client_cert_pem',
        'client_key_pem': 'client_key_pem',
        'key_uid': 'key_uid',
        'master_key_name': 'master_key_name',
        'server_endpoint': 'server_endpoint',
        'token': 'token'
    }

    def __init__(self, base_url=None, ca_cert_pem=None, client_cert_pem=None, client_key_pem=None, key_uid=None, master_key_name=None, server_endpoint=None, token=None):  # noqa: E501
        """KmsBody - a model defined in Swagger"""  # noqa: E501
        self._base_url = None
        self._ca_cert_pem = None
        self._client_cert_pem = None
        self._client_key_pem = None
        self._key_uid = None
        self._master_key_name = None
        self._server_endpoint = None
        self._token = None
        self.discriminator = None
        if base_url is not None:
            self.base_url = base_url
        if ca_cert_pem is not None:
            self.ca_cert_pem = ca_cert_pem
        if client_cert_pem is not None:
            self.client_cert_pem = client_cert_pem
        if client_key_pem is not None:
            self.client_key_pem = client_key_pem
        if key_uid is not None:
            self.key_uid = key_uid
        if master_key_name is not None:
            self.master_key_name = master_key_name
        if server_endpoint is not None:
            self.server_endpoint = server_endpoint
        if token is not None:
            self.token = token

    @property
    def base_url(self):
        """Gets the base_url of this KmsBody.  # noqa: E501


        :return: The base_url of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this KmsBody.


        :param base_url: The base_url of this KmsBody.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def ca_cert_pem(self):
        """Gets the ca_cert_pem of this KmsBody.  # noqa: E501


        :return: The ca_cert_pem of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert_pem

    @ca_cert_pem.setter
    def ca_cert_pem(self, ca_cert_pem):
        """Sets the ca_cert_pem of this KmsBody.


        :param ca_cert_pem: The ca_cert_pem of this KmsBody.  # noqa: E501
        :type: str
        """

        self._ca_cert_pem = ca_cert_pem

    @property
    def client_cert_pem(self):
        """Gets the client_cert_pem of this KmsBody.  # noqa: E501


        :return: The client_cert_pem of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_pem

    @client_cert_pem.setter
    def client_cert_pem(self, client_cert_pem):
        """Sets the client_cert_pem of this KmsBody.


        :param client_cert_pem: The client_cert_pem of this KmsBody.  # noqa: E501
        :type: str
        """

        self._client_cert_pem = client_cert_pem

    @property
    def client_key_pem(self):
        """Gets the client_key_pem of this KmsBody.  # noqa: E501


        :return: The client_key_pem of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._client_key_pem

    @client_key_pem.setter
    def client_key_pem(self, client_key_pem):
        """Sets the client_key_pem of this KmsBody.


        :param client_key_pem: The client_key_pem of this KmsBody.  # noqa: E501
        :type: str
        """

        self._client_key_pem = client_key_pem

    @property
    def key_uid(self):
        """Gets the key_uid of this KmsBody.  # noqa: E501


        :return: The key_uid of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._key_uid

    @key_uid.setter
    def key_uid(self, key_uid):
        """Sets the key_uid of this KmsBody.


        :param key_uid: The key_uid of this KmsBody.  # noqa: E501
        :type: str
        """

        self._key_uid = key_uid

    @property
    def master_key_name(self):
        """Gets the master_key_name of this KmsBody.  # noqa: E501


        :return: The master_key_name of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._master_key_name

    @master_key_name.setter
    def master_key_name(self, master_key_name):
        """Sets the master_key_name of this KmsBody.


        :param master_key_name: The master_key_name of this KmsBody.  # noqa: E501
        :type: str
        """

        self._master_key_name = master_key_name

    @property
    def server_endpoint(self):
        """Gets the server_endpoint of this KmsBody.  # noqa: E501


        :return: The server_endpoint of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._server_endpoint

    @server_endpoint.setter
    def server_endpoint(self, server_endpoint):
        """Sets the server_endpoint of this KmsBody.


        :param server_endpoint: The server_endpoint of this KmsBody.  # noqa: E501
        :type: str
        """

        self._server_endpoint = server_endpoint

    @property
    def token(self):
        """Gets the token of this KmsBody.  # noqa: E501


        :return: The token of this KmsBody.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this KmsBody.


        :param token: The token of this KmsBody.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KmsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
