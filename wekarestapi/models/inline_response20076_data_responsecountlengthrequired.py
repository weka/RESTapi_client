# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_histogram': 'bool',
        'parameters': 'list[str]',
        'permission': 'str',
        'for_node_type': 'str',
        'label': 'str',
        'description': 'str',
        'type': 'str',
        'unit': 'str',
        'can_accumulate': 'bool'
    }

    attribute_map = {
        'is_histogram': 'is_histogram',
        'parameters': 'parameters',
        'permission': 'permission',
        'for_node_type': 'for_node_type',
        'label': 'label',
        'description': 'description',
        'type': 'type',
        'unit': 'unit',
        'can_accumulate': 'can_accumulate'
    }

    def __init__(self, is_histogram=None, parameters=None, permission=None, for_node_type=None, label=None, description=None, type=None, unit=None, can_accumulate=None):  # noqa: E501
        """InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED - a model defined in Swagger"""  # noqa: E501
        self._is_histogram = None
        self._parameters = None
        self._permission = None
        self._for_node_type = None
        self._label = None
        self._description = None
        self._type = None
        self._unit = None
        self._can_accumulate = None
        self.discriminator = None
        if is_histogram is not None:
            self.is_histogram = is_histogram
        if parameters is not None:
            self.parameters = parameters
        if permission is not None:
            self.permission = permission
        if for_node_type is not None:
            self.for_node_type = for_node_type
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if unit is not None:
            self.unit = unit
        if can_accumulate is not None:
            self.can_accumulate = can_accumulate

    @property
    def is_histogram(self):
        """Gets the is_histogram of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The is_histogram of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: bool
        """
        return self._is_histogram

    @is_histogram.setter
    def is_histogram(self, is_histogram):
        """Sets the is_histogram of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param is_histogram: The is_histogram of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: bool
        """

        self._is_histogram = is_histogram

    @property
    def parameters(self):
        """Gets the parameters of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The parameters of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param parameters: The parameters of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def permission(self):
        """Gets the permission of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The permission of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param permission: The permission of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def for_node_type(self):
        """Gets the for_node_type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The for_node_type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._for_node_type

    @for_node_type.setter
    def for_node_type(self, for_node_type):
        """Sets the for_node_type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param for_node_type: The for_node_type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._for_node_type = for_node_type

    @property
    def label(self):
        """Gets the label of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The label of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param label: The label of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The description of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param description: The description of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param type: The type of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The unit of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param unit: The unit of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def can_accumulate(self):
        """Gets the can_accumulate of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501


        :return: The can_accumulate of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :rtype: bool
        """
        return self._can_accumulate

    @can_accumulate.setter
    def can_accumulate(self, can_accumulate):
        """Sets the can_accumulate of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.


        :param can_accumulate: The can_accumulate of this InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED.  # noqa: E501
        :type: bool
        """

        self._can_accumulate = can_accumulate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20076DataRESPONSECOUNTLENGTHREQUIRED):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
