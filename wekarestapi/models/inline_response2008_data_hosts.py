# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008DataHosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'float',
        'backends': 'InlineResponse2008DataDrives',
        'active_count': 'float',
        'clients': 'InlineResponse2008DataHostsClients'
    }

    attribute_map = {
        'total_count': 'total_count',
        'backends': 'backends',
        'active_count': 'active_count',
        'clients': 'clients'
    }

    def __init__(self, total_count=None, backends=None, active_count=None, clients=None):  # noqa: E501
        """InlineResponse2008DataHosts - a model defined in Swagger"""  # noqa: E501
        self._total_count = None
        self._backends = None
        self._active_count = None
        self._clients = None
        self.discriminator = None
        if total_count is not None:
            self.total_count = total_count
        if backends is not None:
            self.backends = backends
        if active_count is not None:
            self.active_count = active_count
        if clients is not None:
            self.clients = clients

    @property
    def total_count(self):
        """Gets the total_count of this InlineResponse2008DataHosts.  # noqa: E501


        :return: The total_count of this InlineResponse2008DataHosts.  # noqa: E501
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this InlineResponse2008DataHosts.


        :param total_count: The total_count of this InlineResponse2008DataHosts.  # noqa: E501
        :type: float
        """

        self._total_count = total_count

    @property
    def backends(self):
        """Gets the backends of this InlineResponse2008DataHosts.  # noqa: E501


        :return: The backends of this InlineResponse2008DataHosts.  # noqa: E501
        :rtype: InlineResponse2008DataDrives
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this InlineResponse2008DataHosts.


        :param backends: The backends of this InlineResponse2008DataHosts.  # noqa: E501
        :type: InlineResponse2008DataDrives
        """

        self._backends = backends

    @property
    def active_count(self):
        """Gets the active_count of this InlineResponse2008DataHosts.  # noqa: E501


        :return: The active_count of this InlineResponse2008DataHosts.  # noqa: E501
        :rtype: float
        """
        return self._active_count

    @active_count.setter
    def active_count(self, active_count):
        """Sets the active_count of this InlineResponse2008DataHosts.


        :param active_count: The active_count of this InlineResponse2008DataHosts.  # noqa: E501
        :type: float
        """

        self._active_count = active_count

    @property
    def clients(self):
        """Gets the clients of this InlineResponse2008DataHosts.  # noqa: E501


        :return: The clients of this InlineResponse2008DataHosts.  # noqa: E501
        :rtype: InlineResponse2008DataHostsClients
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this InlineResponse2008DataHosts.


        :param clients: The clients of this InlineResponse2008DataHosts.  # noqa: E501
        :type: InlineResponse2008DataHostsClients
        """

        self._clients = clients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008DataHosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008DataHosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
