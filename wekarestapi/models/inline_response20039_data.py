# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'usage': 'InlineResponse20039DataUsage',
        'license': 'str',
        'limits': 'InlineResponse20039DataLimits',
        'next_check': 'str',
        'error': 'str',
        'check_interval_secs': 'float'
    }

    attribute_map = {
        'mode': 'mode',
        'usage': 'usage',
        'license': 'license',
        'limits': 'limits',
        'next_check': 'next_check',
        'error': 'error',
        'check_interval_secs': 'check_interval_secs'
    }

    def __init__(self, mode=None, usage=None, license=None, limits=None, next_check=None, error=None, check_interval_secs=None):  # noqa: E501
        """InlineResponse20039Data - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._usage = None
        self._license = None
        self._limits = None
        self._next_check = None
        self._error = None
        self._check_interval_secs = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if usage is not None:
            self.usage = usage
        if license is not None:
            self.license = license
        if limits is not None:
            self.limits = limits
        if next_check is not None:
            self.next_check = next_check
        if error is not None:
            self.error = error
        if check_interval_secs is not None:
            self.check_interval_secs = check_interval_secs

    @property
    def mode(self):
        """Gets the mode of this InlineResponse20039Data.  # noqa: E501


        :return: The mode of this InlineResponse20039Data.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InlineResponse20039Data.


        :param mode: The mode of this InlineResponse20039Data.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def usage(self):
        """Gets the usage of this InlineResponse20039Data.  # noqa: E501


        :return: The usage of this InlineResponse20039Data.  # noqa: E501
        :rtype: InlineResponse20039DataUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this InlineResponse20039Data.


        :param usage: The usage of this InlineResponse20039Data.  # noqa: E501
        :type: InlineResponse20039DataUsage
        """

        self._usage = usage

    @property
    def license(self):
        """Gets the license of this InlineResponse20039Data.  # noqa: E501


        :return: The license of this InlineResponse20039Data.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this InlineResponse20039Data.


        :param license: The license of this InlineResponse20039Data.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def limits(self):
        """Gets the limits of this InlineResponse20039Data.  # noqa: E501


        :return: The limits of this InlineResponse20039Data.  # noqa: E501
        :rtype: InlineResponse20039DataLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this InlineResponse20039Data.


        :param limits: The limits of this InlineResponse20039Data.  # noqa: E501
        :type: InlineResponse20039DataLimits
        """

        self._limits = limits

    @property
    def next_check(self):
        """Gets the next_check of this InlineResponse20039Data.  # noqa: E501


        :return: The next_check of this InlineResponse20039Data.  # noqa: E501
        :rtype: str
        """
        return self._next_check

    @next_check.setter
    def next_check(self, next_check):
        """Sets the next_check of this InlineResponse20039Data.


        :param next_check: The next_check of this InlineResponse20039Data.  # noqa: E501
        :type: str
        """

        self._next_check = next_check

    @property
    def error(self):
        """Gets the error of this InlineResponse20039Data.  # noqa: E501


        :return: The error of this InlineResponse20039Data.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse20039Data.


        :param error: The error of this InlineResponse20039Data.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def check_interval_secs(self):
        """Gets the check_interval_secs of this InlineResponse20039Data.  # noqa: E501


        :return: The check_interval_secs of this InlineResponse20039Data.  # noqa: E501
        :rtype: float
        """
        return self._check_interval_secs

    @check_interval_secs.setter
    def check_interval_secs(self, check_interval_secs):
        """Sets the check_interval_secs of this InlineResponse20039Data.


        :param check_interval_secs: The check_interval_secs of this InlineResponse20039Data.  # noqa: E501
        :type: float
        """

        self._check_interval_secs = check_interval_secs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
