# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'dedup_parameters': 'list[str]',
        'description': 'str',
        'format_string': 'str',
        'is_dedup_event': 'bool',
        'parameters': 'list[str]',
        'permission': 'str',
        'severity': 'str',
        'type': 'str'
    }

    attribute_map = {
        'category': 'category',
        'dedup_parameters': 'dedup_parameters',
        'description': 'description',
        'format_string': 'formatString',
        'is_dedup_event': 'is_dedup_event',
        'parameters': 'parameters',
        'permission': 'permission',
        'severity': 'severity',
        'type': 'type'
    }

    def __init__(self, category=None, dedup_parameters=None, description=None, format_string=None, is_dedup_event=None, parameters=None, permission=None, severity=None, type=None):  # noqa: E501
        """EventDescription - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._dedup_parameters = None
        self._description = None
        self._format_string = None
        self._is_dedup_event = None
        self._parameters = None
        self._permission = None
        self._severity = None
        self._type = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if dedup_parameters is not None:
            self.dedup_parameters = dedup_parameters
        if description is not None:
            self.description = description
        if format_string is not None:
            self.format_string = format_string
        if is_dedup_event is not None:
            self.is_dedup_event = is_dedup_event
        if parameters is not None:
            self.parameters = parameters
        if permission is not None:
            self.permission = permission
        if severity is not None:
            self.severity = severity
        if type is not None:
            self.type = type

    @property
    def category(self):
        """Gets the category of this EventDescription.  # noqa: E501


        :return: The category of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventDescription.


        :param category: The category of this EventDescription.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def dedup_parameters(self):
        """Gets the dedup_parameters of this EventDescription.  # noqa: E501


        :return: The dedup_parameters of this EventDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._dedup_parameters

    @dedup_parameters.setter
    def dedup_parameters(self, dedup_parameters):
        """Sets the dedup_parameters of this EventDescription.


        :param dedup_parameters: The dedup_parameters of this EventDescription.  # noqa: E501
        :type: list[str]
        """

        self._dedup_parameters = dedup_parameters

    @property
    def description(self):
        """Gets the description of this EventDescription.  # noqa: E501


        :return: The description of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventDescription.


        :param description: The description of this EventDescription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def format_string(self):
        """Gets the format_string of this EventDescription.  # noqa: E501


        :return: The format_string of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._format_string

    @format_string.setter
    def format_string(self, format_string):
        """Sets the format_string of this EventDescription.


        :param format_string: The format_string of this EventDescription.  # noqa: E501
        :type: str
        """

        self._format_string = format_string

    @property
    def is_dedup_event(self):
        """Gets the is_dedup_event of this EventDescription.  # noqa: E501


        :return: The is_dedup_event of this EventDescription.  # noqa: E501
        :rtype: bool
        """
        return self._is_dedup_event

    @is_dedup_event.setter
    def is_dedup_event(self, is_dedup_event):
        """Sets the is_dedup_event of this EventDescription.


        :param is_dedup_event: The is_dedup_event of this EventDescription.  # noqa: E501
        :type: bool
        """

        self._is_dedup_event = is_dedup_event

    @property
    def parameters(self):
        """Gets the parameters of this EventDescription.  # noqa: E501


        :return: The parameters of this EventDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EventDescription.


        :param parameters: The parameters of this EventDescription.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def permission(self):
        """Gets the permission of this EventDescription.  # noqa: E501


        :return: The permission of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this EventDescription.


        :param permission: The permission of this EventDescription.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def severity(self):
        """Gets the severity of this EventDescription.  # noqa: E501


        :return: The severity of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventDescription.


        :param severity: The severity of this EventDescription.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this EventDescription.  # noqa: E501


        :return: The type of this EventDescription.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventDescription.


        :param type: The type of this EventDescription.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
