# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class S3StsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'duration': 'float',
        'policy_file_content': 'str',
        'secret_key': 'str'
    }

    attribute_map = {
        'access_key': 'access_key',
        'duration': 'duration',
        'policy_file_content': 'policy_file_content',
        'secret_key': 'secret_key'
    }

    def __init__(self, access_key=None, duration=None, policy_file_content=None, secret_key=None):  # noqa: E501
        """S3StsBody - a model defined in Swagger"""  # noqa: E501
        self._access_key = None
        self._duration = None
        self._policy_file_content = None
        self._secret_key = None
        self.discriminator = None
        self.access_key = access_key
        self.duration = duration
        if policy_file_content is not None:
            self.policy_file_content = policy_file_content
        self.secret_key = secret_key

    @property
    def access_key(self):
        """Gets the access_key of this S3StsBody.  # noqa: E501

        Access key  # noqa: E501

        :return: The access_key of this S3StsBody.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this S3StsBody.

        Access key  # noqa: E501

        :param access_key: The access_key of this S3StsBody.  # noqa: E501
        :type: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def duration(self):
        """Gets the duration of this S3StsBody.  # noqa: E501

        Token expiration duration in seconds (must be at least 900)  # noqa: E501

        :return: The duration of this S3StsBody.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this S3StsBody.

        Token expiration duration in seconds (must be at least 900)  # noqa: E501

        :param duration: The duration of this S3StsBody.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def policy_file_content(self):
        """Gets the policy_file_content of this S3StsBody.  # noqa: E501

        S3 policy file contents for the new token  # noqa: E501

        :return: The policy_file_content of this S3StsBody.  # noqa: E501
        :rtype: str
        """
        return self._policy_file_content

    @policy_file_content.setter
    def policy_file_content(self, policy_file_content):
        """Sets the policy_file_content of this S3StsBody.

        S3 policy file contents for the new token  # noqa: E501

        :param policy_file_content: The policy_file_content of this S3StsBody.  # noqa: E501
        :type: str
        """

        self._policy_file_content = policy_file_content

    @property
    def secret_key(self):
        """Gets the secret_key of this S3StsBody.  # noqa: E501

        Secret key (must be at least 8 characters long)  # noqa: E501

        :return: The secret_key of this S3StsBody.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this S3StsBody.

        Secret key (must be at least 8 characters long)  # noqa: E501

        :param secret_key: The secret_key of this S3StsBody.  # noqa: E501
        :type: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(S3StsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3StsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
