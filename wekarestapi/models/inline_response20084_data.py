# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20084Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_stats_enabled': 'bool',
        'hosts': 'InlineResponse20084DataHosts',
        'is_registered': 'bool',
        'status': 'str',
        'url': 'str'
    }

    attribute_map = {
        'cloud_stats_enabled': 'cloud_stats_enabled',
        'hosts': 'hosts',
        'is_registered': 'isRegistered',
        'status': 'status',
        'url': 'url'
    }

    def __init__(self, cloud_stats_enabled=None, hosts=None, is_registered=None, status=None, url=None):  # noqa: E501
        """InlineResponse20084Data - a model defined in Swagger"""  # noqa: E501
        self._cloud_stats_enabled = None
        self._hosts = None
        self._is_registered = None
        self._status = None
        self._url = None
        self.discriminator = None
        if cloud_stats_enabled is not None:
            self.cloud_stats_enabled = cloud_stats_enabled
        if hosts is not None:
            self.hosts = hosts
        if is_registered is not None:
            self.is_registered = is_registered
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url

    @property
    def cloud_stats_enabled(self):
        """Gets the cloud_stats_enabled of this InlineResponse20084Data.  # noqa: E501


        :return: The cloud_stats_enabled of this InlineResponse20084Data.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_stats_enabled

    @cloud_stats_enabled.setter
    def cloud_stats_enabled(self, cloud_stats_enabled):
        """Sets the cloud_stats_enabled of this InlineResponse20084Data.


        :param cloud_stats_enabled: The cloud_stats_enabled of this InlineResponse20084Data.  # noqa: E501
        :type: bool
        """

        self._cloud_stats_enabled = cloud_stats_enabled

    @property
    def hosts(self):
        """Gets the hosts of this InlineResponse20084Data.  # noqa: E501


        :return: The hosts of this InlineResponse20084Data.  # noqa: E501
        :rtype: InlineResponse20084DataHosts
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this InlineResponse20084Data.


        :param hosts: The hosts of this InlineResponse20084Data.  # noqa: E501
        :type: InlineResponse20084DataHosts
        """

        self._hosts = hosts

    @property
    def is_registered(self):
        """Gets the is_registered of this InlineResponse20084Data.  # noqa: E501


        :return: The is_registered of this InlineResponse20084Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this InlineResponse20084Data.


        :param is_registered: The is_registered of this InlineResponse20084Data.  # noqa: E501
        :type: bool
        """

        self._is_registered = is_registered

    @property
    def status(self):
        """Gets the status of this InlineResponse20084Data.  # noqa: E501


        :return: The status of this InlineResponse20084Data.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20084Data.


        :param status: The status of this InlineResponse20084Data.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this InlineResponse20084Data.  # noqa: E501


        :return: The url of this InlineResponse20084Data.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20084Data.


        :param url: The url of this InlineResponse20084Data.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20084Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20084Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
