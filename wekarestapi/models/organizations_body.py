# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'password': 'str',
        'ssd_quota': 'float',
        'total_quota': 'float',
        'username': 'str'
    }

    attribute_map = {
        'name': 'name',
        'password': 'password',
        'ssd_quota': 'ssd_quota',
        'total_quota': 'total_quota',
        'username': 'username'
    }

    def __init__(self, name=None, password=None, ssd_quota=None, total_quota=None, username=None):  # noqa: E501
        """OrganizationsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._password = None
        self._ssd_quota = None
        self._total_quota = None
        self._username = None
        self.discriminator = None
        self.name = name
        self.password = password
        if ssd_quota is not None:
            self.ssd_quota = ssd_quota
        if total_quota is not None:
            self.total_quota = total_quota
        self.username = username

    @property
    def name(self):
        """Gets the name of this OrganizationsBody.  # noqa: E501

        Organization name  # noqa: E501

        :return: The name of this OrganizationsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationsBody.

        Organization name  # noqa: E501

        :param name: The name of this OrganizationsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this OrganizationsBody.  # noqa: E501

        Password of organization admin  # noqa: E501

        :return: The password of this OrganizationsBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OrganizationsBody.

        Password of organization admin  # noqa: E501

        :param password: The password of this OrganizationsBody.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def ssd_quota(self):
        """Gets the ssd_quota of this OrganizationsBody.  # noqa: E501

        SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)  # noqa: E501

        :return: The ssd_quota of this OrganizationsBody.  # noqa: E501
        :rtype: float
        """
        return self._ssd_quota

    @ssd_quota.setter
    def ssd_quota(self, ssd_quota):
        """Sets the ssd_quota of this OrganizationsBody.

        SSD quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)  # noqa: E501

        :param ssd_quota: The ssd_quota of this OrganizationsBody.  # noqa: E501
        :type: float
        """

        self._ssd_quota = ssd_quota

    @property
    def total_quota(self):
        """Gets the total_quota of this OrganizationsBody.  # noqa: E501

        Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)  # noqa: E501

        :return: The total_quota of this OrganizationsBody.  # noqa: E501
        :rtype: float
        """
        return self._total_quota

    @total_quota.setter
    def total_quota(self, total_quota):
        """Sets the total_quota of this OrganizationsBody.

        Total quota (format - capacity in decimal or binary units - 11B, 1KB, 1MB, 1GB, 1TB, 1PB, 1EB, 1KiB, 1MiB, 1GiB, 1TiB, 1PiB, 1EiB)  # noqa: E501

        :param total_quota: The total_quota of this OrganizationsBody.  # noqa: E501
        :type: float
        """

        self._total_quota = total_quota

    @property
    def username(self):
        """Gets the username of this OrganizationsBody.  # noqa: E501

        Username of organization admin  # noqa: E501

        :return: The username of this OrganizationsBody.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrganizationsBody.

        Username of organization admin  # noqa: E501

        :param username: The username of this OrganizationsBody.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
