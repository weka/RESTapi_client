# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'fmt': 'str',
        'muted': 'bool',
        'params': 'object',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'action': 'action',
        'fmt': 'fmt',
        'muted': 'muted',
        'params': 'params',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, action=None, fmt=None, muted=None, params=None, title=None, type=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._fmt = None
        self._muted = None
        self._params = None
        self._title = None
        self._type = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if fmt is not None:
            self.fmt = fmt
        if muted is not None:
            self.muted = muted
        if params is not None:
            self.params = params
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def action(self):
        """Gets the action of this Alert.  # noqa: E501


        :return: The action of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Alert.


        :param action: The action of this Alert.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def fmt(self):
        """Gets the fmt of this Alert.  # noqa: E501


        :return: The fmt of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._fmt

    @fmt.setter
    def fmt(self, fmt):
        """Sets the fmt of this Alert.


        :param fmt: The fmt of this Alert.  # noqa: E501
        :type: str
        """

        self._fmt = fmt

    @property
    def muted(self):
        """Gets the muted of this Alert.  # noqa: E501


        :return: The muted of this Alert.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Alert.


        :param muted: The muted of this Alert.  # noqa: E501
        :type: bool
        """

        self._muted = muted

    @property
    def params(self):
        """Gets the params of this Alert.  # noqa: E501


        :return: The params of this Alert.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Alert.


        :param params: The params of this Alert.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def title(self):
        """Gets the title of this Alert.  # noqa: E501


        :return: The title of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Alert.


        :param title: The title of this Alert.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Alert.  # noqa: E501


        :return: The type of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Alert.


        :param type: The type of this Alert.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
