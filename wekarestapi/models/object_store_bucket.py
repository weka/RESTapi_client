# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectStoreBucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_id': 'str',
        'auth_method': 'str',
        'bandwidth': 'ObjectStoreBandwidth',
        'bucket': 'str',
        'down_count': 'float',
        'down_nodes': 'list[str]',
        'errors_timeout': 'float',
        'hostname': 'str',
        'id': 'str',
        'last_errors': 'str',
        'max_blocks_in_data_blob': 'float',
        'max_concurrent_downloads': 'float',
        'max_concurrent_removals': 'float',
        'max_concurrent_uploads': 'float',
        'max_extents_in_data_blob': 'float',
        'name': 'str',
        'obs_name': 'str',
        'obs_site': 'str',
        'port': 'float',
        'prefetch_mib': 'float',
        'protocol': 'str',
        'region': 'str',
        'secret_key': 'str',
        'status': 'str',
        'status_download': 'str',
        'status_remove': 'str',
        'status_upload': 'str',
        'uid': 'str',
        'unknown_count': 'float',
        'unknown_nodes': 'list[str]',
        'up_count': 'float',
        'up_nodes': 'list[str]',
        'up_since': 'str',
        'upload_bandwidth': 'ObjectStoreUploadBandwidth'
    }

    attribute_map = {
        'access_key_id': 'access_key_id',
        'auth_method': 'auth_method',
        'bandwidth': 'bandwidth',
        'bucket': 'bucket',
        'down_count': 'down_count',
        'down_nodes': 'down_nodes',
        'errors_timeout': 'errors_timeout',
        'hostname': 'hostname',
        'id': 'id',
        'last_errors': 'last_errors',
        'max_blocks_in_data_blob': 'max_blocks_in_data_blob',
        'max_concurrent_downloads': 'max_concurrent_downloads',
        'max_concurrent_removals': 'max_concurrent_removals',
        'max_concurrent_uploads': 'max_concurrent_uploads',
        'max_extents_in_data_blob': 'max_extents_in_data_blob',
        'name': 'name',
        'obs_name': 'obs_name',
        'obs_site': 'obs_site',
        'port': 'port',
        'prefetch_mib': 'prefetch_mib',
        'protocol': 'protocol',
        'region': 'region',
        'secret_key': 'secret_key',
        'status': 'status',
        'status_download': 'status_download',
        'status_remove': 'status_remove',
        'status_upload': 'status_upload',
        'uid': 'uid',
        'unknown_count': 'unknown_count',
        'unknown_nodes': 'unknown_nodes',
        'up_count': 'up_count',
        'up_nodes': 'up_nodes',
        'up_since': 'up_since',
        'upload_bandwidth': 'uploadBandwidth'
    }

    def __init__(self, access_key_id=None, auth_method=None, bandwidth=None, bucket=None, down_count=None, down_nodes=None, errors_timeout=None, hostname=None, id=None, last_errors=None, max_blocks_in_data_blob=None, max_concurrent_downloads=None, max_concurrent_removals=None, max_concurrent_uploads=None, max_extents_in_data_blob=None, name=None, obs_name=None, obs_site=None, port=None, prefetch_mib=None, protocol=None, region=None, secret_key=None, status=None, status_download=None, status_remove=None, status_upload=None, uid=None, unknown_count=None, unknown_nodes=None, up_count=None, up_nodes=None, up_since=None, upload_bandwidth=None):  # noqa: E501
        """ObjectStoreBucket - a model defined in Swagger"""  # noqa: E501
        self._access_key_id = None
        self._auth_method = None
        self._bandwidth = None
        self._bucket = None
        self._down_count = None
        self._down_nodes = None
        self._errors_timeout = None
        self._hostname = None
        self._id = None
        self._last_errors = None
        self._max_blocks_in_data_blob = None
        self._max_concurrent_downloads = None
        self._max_concurrent_removals = None
        self._max_concurrent_uploads = None
        self._max_extents_in_data_blob = None
        self._name = None
        self._obs_name = None
        self._obs_site = None
        self._port = None
        self._prefetch_mib = None
        self._protocol = None
        self._region = None
        self._secret_key = None
        self._status = None
        self._status_download = None
        self._status_remove = None
        self._status_upload = None
        self._uid = None
        self._unknown_count = None
        self._unknown_nodes = None
        self._up_count = None
        self._up_nodes = None
        self._up_since = None
        self._upload_bandwidth = None
        self.discriminator = None
        if access_key_id is not None:
            self.access_key_id = access_key_id
        if auth_method is not None:
            self.auth_method = auth_method
        if bandwidth is not None:
            self.bandwidth = bandwidth
        if bucket is not None:
            self.bucket = bucket
        if down_count is not None:
            self.down_count = down_count
        if down_nodes is not None:
            self.down_nodes = down_nodes
        if errors_timeout is not None:
            self.errors_timeout = errors_timeout
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if last_errors is not None:
            self.last_errors = last_errors
        if max_blocks_in_data_blob is not None:
            self.max_blocks_in_data_blob = max_blocks_in_data_blob
        if max_concurrent_downloads is not None:
            self.max_concurrent_downloads = max_concurrent_downloads
        if max_concurrent_removals is not None:
            self.max_concurrent_removals = max_concurrent_removals
        if max_concurrent_uploads is not None:
            self.max_concurrent_uploads = max_concurrent_uploads
        if max_extents_in_data_blob is not None:
            self.max_extents_in_data_blob = max_extents_in_data_blob
        if name is not None:
            self.name = name
        if obs_name is not None:
            self.obs_name = obs_name
        if obs_site is not None:
            self.obs_site = obs_site
        if port is not None:
            self.port = port
        if prefetch_mib is not None:
            self.prefetch_mib = prefetch_mib
        if protocol is not None:
            self.protocol = protocol
        if region is not None:
            self.region = region
        if secret_key is not None:
            self.secret_key = secret_key
        if status is not None:
            self.status = status
        if status_download is not None:
            self.status_download = status_download
        if status_remove is not None:
            self.status_remove = status_remove
        if status_upload is not None:
            self.status_upload = status_upload
        if uid is not None:
            self.uid = uid
        if unknown_count is not None:
            self.unknown_count = unknown_count
        if unknown_nodes is not None:
            self.unknown_nodes = unknown_nodes
        if up_count is not None:
            self.up_count = up_count
        if up_nodes is not None:
            self.up_nodes = up_nodes
        if up_since is not None:
            self.up_since = up_since
        if upload_bandwidth is not None:
            self.upload_bandwidth = upload_bandwidth

    @property
    def access_key_id(self):
        """Gets the access_key_id of this ObjectStoreBucket.  # noqa: E501


        :return: The access_key_id of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this ObjectStoreBucket.


        :param access_key_id: The access_key_id of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def auth_method(self):
        """Gets the auth_method of this ObjectStoreBucket.  # noqa: E501


        :return: The auth_method of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this ObjectStoreBucket.


        :param auth_method: The auth_method of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._auth_method = auth_method

    @property
    def bandwidth(self):
        """Gets the bandwidth of this ObjectStoreBucket.  # noqa: E501


        :return: The bandwidth of this ObjectStoreBucket.  # noqa: E501
        :rtype: ObjectStoreBandwidth
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this ObjectStoreBucket.


        :param bandwidth: The bandwidth of this ObjectStoreBucket.  # noqa: E501
        :type: ObjectStoreBandwidth
        """

        self._bandwidth = bandwidth

    @property
    def bucket(self):
        """Gets the bucket of this ObjectStoreBucket.  # noqa: E501


        :return: The bucket of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ObjectStoreBucket.


        :param bucket: The bucket of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def down_count(self):
        """Gets the down_count of this ObjectStoreBucket.  # noqa: E501


        :return: The down_count of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._down_count

    @down_count.setter
    def down_count(self, down_count):
        """Sets the down_count of this ObjectStoreBucket.


        :param down_count: The down_count of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._down_count = down_count

    @property
    def down_nodes(self):
        """Gets the down_nodes of this ObjectStoreBucket.  # noqa: E501


        :return: The down_nodes of this ObjectStoreBucket.  # noqa: E501
        :rtype: list[str]
        """
        return self._down_nodes

    @down_nodes.setter
    def down_nodes(self, down_nodes):
        """Sets the down_nodes of this ObjectStoreBucket.


        :param down_nodes: The down_nodes of this ObjectStoreBucket.  # noqa: E501
        :type: list[str]
        """

        self._down_nodes = down_nodes

    @property
    def errors_timeout(self):
        """Gets the errors_timeout of this ObjectStoreBucket.  # noqa: E501


        :return: The errors_timeout of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._errors_timeout

    @errors_timeout.setter
    def errors_timeout(self, errors_timeout):
        """Sets the errors_timeout of this ObjectStoreBucket.


        :param errors_timeout: The errors_timeout of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._errors_timeout = errors_timeout

    @property
    def hostname(self):
        """Gets the hostname of this ObjectStoreBucket.  # noqa: E501


        :return: The hostname of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ObjectStoreBucket.


        :param hostname: The hostname of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this ObjectStoreBucket.  # noqa: E501


        :return: The id of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectStoreBucket.


        :param id: The id of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_errors(self):
        """Gets the last_errors of this ObjectStoreBucket.  # noqa: E501


        :return: The last_errors of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._last_errors

    @last_errors.setter
    def last_errors(self, last_errors):
        """Sets the last_errors of this ObjectStoreBucket.


        :param last_errors: The last_errors of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._last_errors = last_errors

    @property
    def max_blocks_in_data_blob(self):
        """Gets the max_blocks_in_data_blob of this ObjectStoreBucket.  # noqa: E501


        :return: The max_blocks_in_data_blob of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._max_blocks_in_data_blob

    @max_blocks_in_data_blob.setter
    def max_blocks_in_data_blob(self, max_blocks_in_data_blob):
        """Sets the max_blocks_in_data_blob of this ObjectStoreBucket.


        :param max_blocks_in_data_blob: The max_blocks_in_data_blob of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._max_blocks_in_data_blob = max_blocks_in_data_blob

    @property
    def max_concurrent_downloads(self):
        """Gets the max_concurrent_downloads of this ObjectStoreBucket.  # noqa: E501


        :return: The max_concurrent_downloads of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._max_concurrent_downloads

    @max_concurrent_downloads.setter
    def max_concurrent_downloads(self, max_concurrent_downloads):
        """Sets the max_concurrent_downloads of this ObjectStoreBucket.


        :param max_concurrent_downloads: The max_concurrent_downloads of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._max_concurrent_downloads = max_concurrent_downloads

    @property
    def max_concurrent_removals(self):
        """Gets the max_concurrent_removals of this ObjectStoreBucket.  # noqa: E501


        :return: The max_concurrent_removals of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._max_concurrent_removals

    @max_concurrent_removals.setter
    def max_concurrent_removals(self, max_concurrent_removals):
        """Sets the max_concurrent_removals of this ObjectStoreBucket.


        :param max_concurrent_removals: The max_concurrent_removals of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._max_concurrent_removals = max_concurrent_removals

    @property
    def max_concurrent_uploads(self):
        """Gets the max_concurrent_uploads of this ObjectStoreBucket.  # noqa: E501


        :return: The max_concurrent_uploads of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._max_concurrent_uploads

    @max_concurrent_uploads.setter
    def max_concurrent_uploads(self, max_concurrent_uploads):
        """Sets the max_concurrent_uploads of this ObjectStoreBucket.


        :param max_concurrent_uploads: The max_concurrent_uploads of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._max_concurrent_uploads = max_concurrent_uploads

    @property
    def max_extents_in_data_blob(self):
        """Gets the max_extents_in_data_blob of this ObjectStoreBucket.  # noqa: E501


        :return: The max_extents_in_data_blob of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._max_extents_in_data_blob

    @max_extents_in_data_blob.setter
    def max_extents_in_data_blob(self, max_extents_in_data_blob):
        """Sets the max_extents_in_data_blob of this ObjectStoreBucket.


        :param max_extents_in_data_blob: The max_extents_in_data_blob of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._max_extents_in_data_blob = max_extents_in_data_blob

    @property
    def name(self):
        """Gets the name of this ObjectStoreBucket.  # noqa: E501


        :return: The name of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectStoreBucket.


        :param name: The name of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def obs_name(self):
        """Gets the obs_name of this ObjectStoreBucket.  # noqa: E501


        :return: The obs_name of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._obs_name

    @obs_name.setter
    def obs_name(self, obs_name):
        """Sets the obs_name of this ObjectStoreBucket.


        :param obs_name: The obs_name of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._obs_name = obs_name

    @property
    def obs_site(self):
        """Gets the obs_site of this ObjectStoreBucket.  # noqa: E501


        :return: The obs_site of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._obs_site

    @obs_site.setter
    def obs_site(self, obs_site):
        """Sets the obs_site of this ObjectStoreBucket.


        :param obs_site: The obs_site of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._obs_site = obs_site

    @property
    def port(self):
        """Gets the port of this ObjectStoreBucket.  # noqa: E501


        :return: The port of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ObjectStoreBucket.


        :param port: The port of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._port = port

    @property
    def prefetch_mib(self):
        """Gets the prefetch_mib of this ObjectStoreBucket.  # noqa: E501


        :return: The prefetch_mib of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._prefetch_mib

    @prefetch_mib.setter
    def prefetch_mib(self, prefetch_mib):
        """Sets the prefetch_mib of this ObjectStoreBucket.


        :param prefetch_mib: The prefetch_mib of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._prefetch_mib = prefetch_mib

    @property
    def protocol(self):
        """Gets the protocol of this ObjectStoreBucket.  # noqa: E501


        :return: The protocol of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ObjectStoreBucket.


        :param protocol: The protocol of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def region(self):
        """Gets the region of this ObjectStoreBucket.  # noqa: E501


        :return: The region of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ObjectStoreBucket.


        :param region: The region of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this ObjectStoreBucket.  # noqa: E501


        :return: The secret_key of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ObjectStoreBucket.


        :param secret_key: The secret_key of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def status(self):
        """Gets the status of this ObjectStoreBucket.  # noqa: E501


        :return: The status of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ObjectStoreBucket.


        :param status: The status of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_download(self):
        """Gets the status_download of this ObjectStoreBucket.  # noqa: E501


        :return: The status_download of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._status_download

    @status_download.setter
    def status_download(self, status_download):
        """Sets the status_download of this ObjectStoreBucket.


        :param status_download: The status_download of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._status_download = status_download

    @property
    def status_remove(self):
        """Gets the status_remove of this ObjectStoreBucket.  # noqa: E501


        :return: The status_remove of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._status_remove

    @status_remove.setter
    def status_remove(self, status_remove):
        """Sets the status_remove of this ObjectStoreBucket.


        :param status_remove: The status_remove of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._status_remove = status_remove

    @property
    def status_upload(self):
        """Gets the status_upload of this ObjectStoreBucket.  # noqa: E501


        :return: The status_upload of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._status_upload

    @status_upload.setter
    def status_upload(self, status_upload):
        """Sets the status_upload of this ObjectStoreBucket.


        :param status_upload: The status_upload of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._status_upload = status_upload

    @property
    def uid(self):
        """Gets the uid of this ObjectStoreBucket.  # noqa: E501


        :return: The uid of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ObjectStoreBucket.


        :param uid: The uid of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def unknown_count(self):
        """Gets the unknown_count of this ObjectStoreBucket.  # noqa: E501


        :return: The unknown_count of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._unknown_count

    @unknown_count.setter
    def unknown_count(self, unknown_count):
        """Sets the unknown_count of this ObjectStoreBucket.


        :param unknown_count: The unknown_count of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._unknown_count = unknown_count

    @property
    def unknown_nodes(self):
        """Gets the unknown_nodes of this ObjectStoreBucket.  # noqa: E501


        :return: The unknown_nodes of this ObjectStoreBucket.  # noqa: E501
        :rtype: list[str]
        """
        return self._unknown_nodes

    @unknown_nodes.setter
    def unknown_nodes(self, unknown_nodes):
        """Sets the unknown_nodes of this ObjectStoreBucket.


        :param unknown_nodes: The unknown_nodes of this ObjectStoreBucket.  # noqa: E501
        :type: list[str]
        """

        self._unknown_nodes = unknown_nodes

    @property
    def up_count(self):
        """Gets the up_count of this ObjectStoreBucket.  # noqa: E501


        :return: The up_count of this ObjectStoreBucket.  # noqa: E501
        :rtype: float
        """
        return self._up_count

    @up_count.setter
    def up_count(self, up_count):
        """Sets the up_count of this ObjectStoreBucket.


        :param up_count: The up_count of this ObjectStoreBucket.  # noqa: E501
        :type: float
        """

        self._up_count = up_count

    @property
    def up_nodes(self):
        """Gets the up_nodes of this ObjectStoreBucket.  # noqa: E501


        :return: The up_nodes of this ObjectStoreBucket.  # noqa: E501
        :rtype: list[str]
        """
        return self._up_nodes

    @up_nodes.setter
    def up_nodes(self, up_nodes):
        """Sets the up_nodes of this ObjectStoreBucket.


        :param up_nodes: The up_nodes of this ObjectStoreBucket.  # noqa: E501
        :type: list[str]
        """

        self._up_nodes = up_nodes

    @property
    def up_since(self):
        """Gets the up_since of this ObjectStoreBucket.  # noqa: E501


        :return: The up_since of this ObjectStoreBucket.  # noqa: E501
        :rtype: str
        """
        return self._up_since

    @up_since.setter
    def up_since(self, up_since):
        """Sets the up_since of this ObjectStoreBucket.


        :param up_since: The up_since of this ObjectStoreBucket.  # noqa: E501
        :type: str
        """

        self._up_since = up_since

    @property
    def upload_bandwidth(self):
        """Gets the upload_bandwidth of this ObjectStoreBucket.  # noqa: E501


        :return: The upload_bandwidth of this ObjectStoreBucket.  # noqa: E501
        :rtype: ObjectStoreUploadBandwidth
        """
        return self._upload_bandwidth

    @upload_bandwidth.setter
    def upload_bandwidth(self, upload_bandwidth):
        """Sets the upload_bandwidth of this ObjectStoreBucket.


        :param upload_bandwidth: The upload_bandwidth of this ObjectStoreBucket.  # noqa: E501
        :type: ObjectStoreUploadBandwidth
        """

        self._upload_bandwidth = upload_bandwidth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectStoreBucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStoreBucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
