# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008DataActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'obs_upload_bytes_per_second': 'float',
        'sum_bytes_read': 'float',
        'num_writes': 'float',
        'obs_download_bytes_per_second': 'float',
        'sum_bytes_written': 'float',
        'num_reads': 'float',
        'num_ops': 'float'
    }

    attribute_map = {
        'obs_upload_bytes_per_second': 'obs_upload_bytes_per_second',
        'sum_bytes_read': 'sum_bytes_read',
        'num_writes': 'num_writes',
        'obs_download_bytes_per_second': 'obs_download_bytes_per_second',
        'sum_bytes_written': 'sum_bytes_written',
        'num_reads': 'num_reads',
        'num_ops': 'num_ops'
    }

    def __init__(self, obs_upload_bytes_per_second=None, sum_bytes_read=None, num_writes=None, obs_download_bytes_per_second=None, sum_bytes_written=None, num_reads=None, num_ops=None):  # noqa: E501
        """InlineResponse2008DataActivity - a model defined in Swagger"""  # noqa: E501
        self._obs_upload_bytes_per_second = None
        self._sum_bytes_read = None
        self._num_writes = None
        self._obs_download_bytes_per_second = None
        self._sum_bytes_written = None
        self._num_reads = None
        self._num_ops = None
        self.discriminator = None
        if obs_upload_bytes_per_second is not None:
            self.obs_upload_bytes_per_second = obs_upload_bytes_per_second
        if sum_bytes_read is not None:
            self.sum_bytes_read = sum_bytes_read
        if num_writes is not None:
            self.num_writes = num_writes
        if obs_download_bytes_per_second is not None:
            self.obs_download_bytes_per_second = obs_download_bytes_per_second
        if sum_bytes_written is not None:
            self.sum_bytes_written = sum_bytes_written
        if num_reads is not None:
            self.num_reads = num_reads
        if num_ops is not None:
            self.num_ops = num_ops

    @property
    def obs_upload_bytes_per_second(self):
        """Gets the obs_upload_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The obs_upload_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._obs_upload_bytes_per_second

    @obs_upload_bytes_per_second.setter
    def obs_upload_bytes_per_second(self, obs_upload_bytes_per_second):
        """Sets the obs_upload_bytes_per_second of this InlineResponse2008DataActivity.


        :param obs_upload_bytes_per_second: The obs_upload_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._obs_upload_bytes_per_second = obs_upload_bytes_per_second

    @property
    def sum_bytes_read(self):
        """Gets the sum_bytes_read of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The sum_bytes_read of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._sum_bytes_read

    @sum_bytes_read.setter
    def sum_bytes_read(self, sum_bytes_read):
        """Sets the sum_bytes_read of this InlineResponse2008DataActivity.


        :param sum_bytes_read: The sum_bytes_read of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._sum_bytes_read = sum_bytes_read

    @property
    def num_writes(self):
        """Gets the num_writes of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The num_writes of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._num_writes

    @num_writes.setter
    def num_writes(self, num_writes):
        """Sets the num_writes of this InlineResponse2008DataActivity.


        :param num_writes: The num_writes of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._num_writes = num_writes

    @property
    def obs_download_bytes_per_second(self):
        """Gets the obs_download_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The obs_download_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._obs_download_bytes_per_second

    @obs_download_bytes_per_second.setter
    def obs_download_bytes_per_second(self, obs_download_bytes_per_second):
        """Sets the obs_download_bytes_per_second of this InlineResponse2008DataActivity.


        :param obs_download_bytes_per_second: The obs_download_bytes_per_second of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._obs_download_bytes_per_second = obs_download_bytes_per_second

    @property
    def sum_bytes_written(self):
        """Gets the sum_bytes_written of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The sum_bytes_written of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._sum_bytes_written

    @sum_bytes_written.setter
    def sum_bytes_written(self, sum_bytes_written):
        """Sets the sum_bytes_written of this InlineResponse2008DataActivity.


        :param sum_bytes_written: The sum_bytes_written of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._sum_bytes_written = sum_bytes_written

    @property
    def num_reads(self):
        """Gets the num_reads of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The num_reads of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._num_reads

    @num_reads.setter
    def num_reads(self, num_reads):
        """Sets the num_reads of this InlineResponse2008DataActivity.


        :param num_reads: The num_reads of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._num_reads = num_reads

    @property
    def num_ops(self):
        """Gets the num_ops of this InlineResponse2008DataActivity.  # noqa: E501


        :return: The num_ops of this InlineResponse2008DataActivity.  # noqa: E501
        :rtype: float
        """
        return self._num_ops

    @num_ops.setter
    def num_ops(self, num_ops):
        """Sets the num_ops of this InlineResponse2008DataActivity.


        :param num_ops: The num_ops of this InlineResponse2008DataActivity.  # noqa: E501
        :type: float
        """

        self._num_ops = num_ops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008DataActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008DataActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
