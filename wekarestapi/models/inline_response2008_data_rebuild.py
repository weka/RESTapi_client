# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008DataRebuild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'required_f_ds_for_rebuild': 'float',
        'unavailable_percent': 'float',
        'enough_active_f_ds': 'bool',
        'total_copies_mi_b': 'float',
        'unavailable_mi_b': 'float',
        'progress_percent': 'float',
        'stripe_disks': 'float',
        'num_active_f_ds': 'float',
        'total_copies_done_mi_b': 'float',
        'protection_state': 'list[InlineResponse2008DataRebuildProtectionState]'
    }

    attribute_map = {
        'required_f_ds_for_rebuild': 'requiredFDsForRebuild',
        'unavailable_percent': 'unavailablePercent',
        'enough_active_f_ds': 'enoughActiveFDs',
        'total_copies_mi_b': 'totalCopiesMiB',
        'unavailable_mi_b': 'unavailableMiB',
        'progress_percent': 'progressPercent',
        'stripe_disks': 'stripeDisks',
        'num_active_f_ds': 'numActiveFDs',
        'total_copies_done_mi_b': 'totalCopiesDoneMiB',
        'protection_state': 'protectionState'
    }

    def __init__(self, required_f_ds_for_rebuild=None, unavailable_percent=None, enough_active_f_ds=None, total_copies_mi_b=None, unavailable_mi_b=None, progress_percent=None, stripe_disks=None, num_active_f_ds=None, total_copies_done_mi_b=None, protection_state=None):  # noqa: E501
        """InlineResponse2008DataRebuild - a model defined in Swagger"""  # noqa: E501
        self._required_f_ds_for_rebuild = None
        self._unavailable_percent = None
        self._enough_active_f_ds = None
        self._total_copies_mi_b = None
        self._unavailable_mi_b = None
        self._progress_percent = None
        self._stripe_disks = None
        self._num_active_f_ds = None
        self._total_copies_done_mi_b = None
        self._protection_state = None
        self.discriminator = None
        if required_f_ds_for_rebuild is not None:
            self.required_f_ds_for_rebuild = required_f_ds_for_rebuild
        if unavailable_percent is not None:
            self.unavailable_percent = unavailable_percent
        if enough_active_f_ds is not None:
            self.enough_active_f_ds = enough_active_f_ds
        if total_copies_mi_b is not None:
            self.total_copies_mi_b = total_copies_mi_b
        if unavailable_mi_b is not None:
            self.unavailable_mi_b = unavailable_mi_b
        if progress_percent is not None:
            self.progress_percent = progress_percent
        if stripe_disks is not None:
            self.stripe_disks = stripe_disks
        if num_active_f_ds is not None:
            self.num_active_f_ds = num_active_f_ds
        if total_copies_done_mi_b is not None:
            self.total_copies_done_mi_b = total_copies_done_mi_b
        if protection_state is not None:
            self.protection_state = protection_state

    @property
    def required_f_ds_for_rebuild(self):
        """Gets the required_f_ds_for_rebuild of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The required_f_ds_for_rebuild of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._required_f_ds_for_rebuild

    @required_f_ds_for_rebuild.setter
    def required_f_ds_for_rebuild(self, required_f_ds_for_rebuild):
        """Sets the required_f_ds_for_rebuild of this InlineResponse2008DataRebuild.


        :param required_f_ds_for_rebuild: The required_f_ds_for_rebuild of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._required_f_ds_for_rebuild = required_f_ds_for_rebuild

    @property
    def unavailable_percent(self):
        """Gets the unavailable_percent of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The unavailable_percent of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._unavailable_percent

    @unavailable_percent.setter
    def unavailable_percent(self, unavailable_percent):
        """Sets the unavailable_percent of this InlineResponse2008DataRebuild.


        :param unavailable_percent: The unavailable_percent of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._unavailable_percent = unavailable_percent

    @property
    def enough_active_f_ds(self):
        """Gets the enough_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The enough_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: bool
        """
        return self._enough_active_f_ds

    @enough_active_f_ds.setter
    def enough_active_f_ds(self, enough_active_f_ds):
        """Sets the enough_active_f_ds of this InlineResponse2008DataRebuild.


        :param enough_active_f_ds: The enough_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: bool
        """

        self._enough_active_f_ds = enough_active_f_ds

    @property
    def total_copies_mi_b(self):
        """Gets the total_copies_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The total_copies_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._total_copies_mi_b

    @total_copies_mi_b.setter
    def total_copies_mi_b(self, total_copies_mi_b):
        """Sets the total_copies_mi_b of this InlineResponse2008DataRebuild.


        :param total_copies_mi_b: The total_copies_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._total_copies_mi_b = total_copies_mi_b

    @property
    def unavailable_mi_b(self):
        """Gets the unavailable_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The unavailable_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._unavailable_mi_b

    @unavailable_mi_b.setter
    def unavailable_mi_b(self, unavailable_mi_b):
        """Sets the unavailable_mi_b of this InlineResponse2008DataRebuild.


        :param unavailable_mi_b: The unavailable_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._unavailable_mi_b = unavailable_mi_b

    @property
    def progress_percent(self):
        """Gets the progress_percent of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The progress_percent of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this InlineResponse2008DataRebuild.


        :param progress_percent: The progress_percent of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._progress_percent = progress_percent

    @property
    def stripe_disks(self):
        """Gets the stripe_disks of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The stripe_disks of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._stripe_disks

    @stripe_disks.setter
    def stripe_disks(self, stripe_disks):
        """Sets the stripe_disks of this InlineResponse2008DataRebuild.


        :param stripe_disks: The stripe_disks of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._stripe_disks = stripe_disks

    @property
    def num_active_f_ds(self):
        """Gets the num_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The num_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._num_active_f_ds

    @num_active_f_ds.setter
    def num_active_f_ds(self, num_active_f_ds):
        """Sets the num_active_f_ds of this InlineResponse2008DataRebuild.


        :param num_active_f_ds: The num_active_f_ds of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._num_active_f_ds = num_active_f_ds

    @property
    def total_copies_done_mi_b(self):
        """Gets the total_copies_done_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The total_copies_done_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: float
        """
        return self._total_copies_done_mi_b

    @total_copies_done_mi_b.setter
    def total_copies_done_mi_b(self, total_copies_done_mi_b):
        """Sets the total_copies_done_mi_b of this InlineResponse2008DataRebuild.


        :param total_copies_done_mi_b: The total_copies_done_mi_b of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: float
        """

        self._total_copies_done_mi_b = total_copies_done_mi_b

    @property
    def protection_state(self):
        """Gets the protection_state of this InlineResponse2008DataRebuild.  # noqa: E501


        :return: The protection_state of this InlineResponse2008DataRebuild.  # noqa: E501
        :rtype: list[InlineResponse2008DataRebuildProtectionState]
        """
        return self._protection_state

    @protection_state.setter
    def protection_state(self, protection_state):
        """Sets the protection_state of this InlineResponse2008DataRebuild.


        :param protection_state: The protection_state of this InlineResponse2008DataRebuild.  # noqa: E501
        :type: list[InlineResponse2008DataRebuildProtectionState]
        """

        self._protection_state = protection_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008DataRebuild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008DataRebuild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
