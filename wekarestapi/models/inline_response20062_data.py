# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20062Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_name': 'str',
        'content': 'str',
        'country': 'str',
        'email': 'str',
        'enabled': 'bool',
        'expired_date': 'str',
        'locality': 'str',
        'organization': 'str',
        'organization_unit': 'str',
        'state': 'str'
    }

    attribute_map = {
        'common_name': 'common_name',
        'content': 'content',
        'country': 'country',
        'email': 'email',
        'enabled': 'enabled',
        'expired_date': 'expired_date',
        'locality': 'locality',
        'organization': 'organization',
        'organization_unit': 'organization_unit',
        'state': 'state'
    }

    def __init__(self, common_name=None, content=None, country=None, email=None, enabled=None, expired_date=None, locality=None, organization=None, organization_unit=None, state=None):  # noqa: E501
        """InlineResponse20062Data - a model defined in Swagger"""  # noqa: E501
        self._common_name = None
        self._content = None
        self._country = None
        self._email = None
        self._enabled = None
        self._expired_date = None
        self._locality = None
        self._organization = None
        self._organization_unit = None
        self._state = None
        self.discriminator = None
        if common_name is not None:
            self.common_name = common_name
        if content is not None:
            self.content = content
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if enabled is not None:
            self.enabled = enabled
        if expired_date is not None:
            self.expired_date = expired_date
        if locality is not None:
            self.locality = locality
        if organization is not None:
            self.organization = organization
        if organization_unit is not None:
            self.organization_unit = organization_unit
        if state is not None:
            self.state = state

    @property
    def common_name(self):
        """Gets the common_name of this InlineResponse20062Data.  # noqa: E501


        :return: The common_name of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this InlineResponse20062Data.


        :param common_name: The common_name of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def content(self):
        """Gets the content of this InlineResponse20062Data.  # noqa: E501


        :return: The content of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20062Data.


        :param content: The content of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def country(self):
        """Gets the country of this InlineResponse20062Data.  # noqa: E501


        :return: The country of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20062Data.


        :param country: The country of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this InlineResponse20062Data.  # noqa: E501


        :return: The email of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20062Data.


        :param email: The email of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse20062Data.  # noqa: E501


        :return: The enabled of this InlineResponse20062Data.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse20062Data.


        :param enabled: The enabled of this InlineResponse20062Data.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def expired_date(self):
        """Gets the expired_date of this InlineResponse20062Data.  # noqa: E501


        :return: The expired_date of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._expired_date

    @expired_date.setter
    def expired_date(self, expired_date):
        """Sets the expired_date of this InlineResponse20062Data.


        :param expired_date: The expired_date of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._expired_date = expired_date

    @property
    def locality(self):
        """Gets the locality of this InlineResponse20062Data.  # noqa: E501


        :return: The locality of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this InlineResponse20062Data.


        :param locality: The locality of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def organization(self):
        """Gets the organization of this InlineResponse20062Data.  # noqa: E501


        :return: The organization of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this InlineResponse20062Data.


        :param organization: The organization of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def organization_unit(self):
        """Gets the organization_unit of this InlineResponse20062Data.  # noqa: E501


        :return: The organization_unit of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._organization_unit

    @organization_unit.setter
    def organization_unit(self, organization_unit):
        """Sets the organization_unit of this InlineResponse20062Data.


        :param organization_unit: The organization_unit of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._organization_unit = organization_unit

    @property
    def state(self):
        """Gets the state of this InlineResponse20062Data.  # noqa: E501


        :return: The state of this InlineResponse20062Data.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20062Data.


        :param state: The state of this InlineResponse20062Data.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20062Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20062Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
