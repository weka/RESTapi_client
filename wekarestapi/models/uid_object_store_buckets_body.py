# coding: utf-8

"""
    @weka-api

    <div>The Weka system supports a RESTful API. This is useful when automating the interaction with the Weka system and when integrating it into your workflows or monitoring systems. The API is accessible at port 14000, via the /api/v2 URL, you can explore it via /api/v2/docs when accessing from the cluster (e.g. https://weka01:14000/api/v2/docs).<div style=\"margin-top: 15px;\">Note: Weka uses 64bit numbers. Please take special care when interacting with the API with different program languages (In JS for example you can use \"json-bigint\")</div></div>  # noqa: E501

    OpenAPI spec version: 3.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UidObjectStoreBucketsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'obs_mode': 'str',
        'obs_name': 'str'
    }

    attribute_map = {
        'obs_mode': 'obs_mode',
        'obs_name': 'obs_name'
    }

    def __init__(self, obs_mode=None, obs_name=None):  # noqa: E501
        """UidObjectStoreBucketsBody - a model defined in Swagger"""  # noqa: E501
        self._obs_mode = None
        self._obs_name = None
        self.discriminator = None
        if obs_mode is not None:
            self.obs_mode = obs_mode
        self.obs_name = obs_name

    @property
    def obs_mode(self):
        """Gets the obs_mode of this UidObjectStoreBucketsBody.  # noqa: E501

        The operation mode for the OBS  # noqa: E501

        :return: The obs_mode of this UidObjectStoreBucketsBody.  # noqa: E501
        :rtype: str
        """
        return self._obs_mode

    @obs_mode.setter
    def obs_mode(self, obs_mode):
        """Sets the obs_mode of this UidObjectStoreBucketsBody.

        The operation mode for the OBS  # noqa: E501

        :param obs_mode: The obs_mode of this UidObjectStoreBucketsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["READ_ONLY", "WRITABLE"]  # noqa: E501
        if obs_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `obs_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(obs_mode, allowed_values)
            )

        self._obs_mode = obs_mode

    @property
    def obs_name(self):
        """Gets the obs_name of this UidObjectStoreBucketsBody.  # noqa: E501

        Name of the Object Store Bucket to attach  # noqa: E501

        :return: The obs_name of this UidObjectStoreBucketsBody.  # noqa: E501
        :rtype: str
        """
        return self._obs_name

    @obs_name.setter
    def obs_name(self, obs_name):
        """Sets the obs_name of this UidObjectStoreBucketsBody.

        Name of the Object Store Bucket to attach  # noqa: E501

        :param obs_name: The obs_name of this UidObjectStoreBucketsBody.  # noqa: E501
        :type: str
        """
        if obs_name is None:
            raise ValueError("Invalid value for `obs_name`, must not be `None`")  # noqa: E501

        self._obs_name = obs_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UidObjectStoreBucketsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UidObjectStoreBucketsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
